// Code generated by ros-gen-go.
// source: ../msg/AllFieldTypes.msg
// DO NOT EDIT!
package msgs

import (
	"bytes"
	"encoding/binary"
	"fmt"

	"github.com/ppg/rosgo/ros"
)

type _MsgAllFieldTypes struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgAllFieldTypes) Text() string {
	return t.text
}

func (t *_MsgAllFieldTypes) Name() string {
	return t.name
}

func (t *_MsgAllFieldTypes) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgAllFieldTypes) NewMessage() ros.Message {
	m := new(AllFieldTypes)

	return m
}

var (
	MsgAllFieldTypes = &_MsgAllFieldTypes{
		`byte FOO=1
byte BAR=2
string HOGE=hoge

#Header h
byte b
int8 i8
int16 i16
int32 i32
int64 i64
uint8 u8
uint16 u16
uint32 u32
uint64 u64
float32 f32
float64 f64
time t
duration d
string s
#std_msgs/ColorRGBA c
uint32[] dyn_ary
uint32[2] fix_ary
#std_msgs/ColorRGBA[] msg_ary
`,
		"msgs/AllFieldTypes",
		"15fd58ea92bbcc8f8e7a5bdb464e29af",
	}
)

type AllFieldTypes struct {
	HOGE   string
	B      int8
	I8     int8
	I16    int16
	I32    int32
	I64    int64
	U8     uint8
	U16    uint16
	U32    uint32
	U64    uint64
	F32    float32
	F64    float64
	T      ros.Time
	D      ros.Duration
	S      string
	DynAry []uint32
	FixAry [2]uint32
}

func (m *AllFieldTypes) Type() ros.MessageType {
	return MsgAllFieldTypes
}

func (m *AllFieldTypes) Serialize(buf *bytes.Buffer) (err error) {
	// HOGE
	binary.Write(buf, binary.LittleEndian, uint32(len([]byte(m.HOGE))))
	buf.Write([]byte(m.HOGE))

	// B
	binary.Write(buf, binary.LittleEndian, m.B)

	// I8
	binary.Write(buf, binary.LittleEndian, m.I8)

	// I16
	binary.Write(buf, binary.LittleEndian, m.I16)

	// I32
	binary.Write(buf, binary.LittleEndian, m.I32)

	// I64
	binary.Write(buf, binary.LittleEndian, m.I64)

	// U8
	binary.Write(buf, binary.LittleEndian, m.U8)

	// U16
	binary.Write(buf, binary.LittleEndian, m.U16)

	// U32
	binary.Write(buf, binary.LittleEndian, m.U32)

	// U64
	binary.Write(buf, binary.LittleEndian, m.U64)

	// F32
	binary.Write(buf, binary.LittleEndian, m.F32)

	// F64
	binary.Write(buf, binary.LittleEndian, m.F64)

	// T
	binary.Write(buf, binary.LittleEndian, m.T.Sec)
	binary.Write(buf, binary.LittleEndian, m.T.NSec)

	// D
	binary.Write(buf, binary.LittleEndian, m.D.Sec)
	binary.Write(buf, binary.LittleEndian, m.D.NSec)

	// S
	binary.Write(buf, binary.LittleEndian, uint32(len([]byte(m.S))))
	buf.Write([]byte(m.S))

	// DynAry
	binary.Write(buf, binary.LittleEndian, uint32(len(m.DynAry)))
	for _, e := range m.DynAry {
		binary.Write(buf, binary.LittleEndian, e)
	}

	// FixAry
	binary.Write(buf, binary.LittleEndian, uint32(len(m.FixAry)))
	for _, e := range m.FixAry {
		binary.Write(buf, binary.LittleEndian, e)
	}

	return
}

func (m *AllFieldTypes) Deserialize(buf *bytes.Reader) (err error) {
	// HOGE
	{
		var size uint32
		if err = binary.Read(buf, binary.LittleEndian, &size); err != nil {
			return err
		}
		data := make([]byte, int(size))
		if err = binary.Read(buf, binary.LittleEndian, data); err != nil {
			return err
		}
		m.HOGE = string(data)
	}

	// B
	if err = binary.Read(buf, binary.LittleEndian, &m.B); err != nil {
		return err
	}

	// I8
	if err = binary.Read(buf, binary.LittleEndian, &m.I8); err != nil {
		return err
	}

	// I16
	if err = binary.Read(buf, binary.LittleEndian, &m.I16); err != nil {
		return err
	}

	// I32
	if err = binary.Read(buf, binary.LittleEndian, &m.I32); err != nil {
		return err
	}

	// I64
	if err = binary.Read(buf, binary.LittleEndian, &m.I64); err != nil {
		return err
	}

	// U8
	if err = binary.Read(buf, binary.LittleEndian, &m.U8); err != nil {
		return err
	}

	// U16
	if err = binary.Read(buf, binary.LittleEndian, &m.U16); err != nil {
		return err
	}

	// U32
	if err = binary.Read(buf, binary.LittleEndian, &m.U32); err != nil {
		return err
	}

	// U64
	if err = binary.Read(buf, binary.LittleEndian, &m.U64); err != nil {
		return err
	}

	// F32
	if err = binary.Read(buf, binary.LittleEndian, &m.F32); err != nil {
		return err
	}

	// F64
	if err = binary.Read(buf, binary.LittleEndian, &m.F64); err != nil {
		return err
	}

	// T
	if err = binary.Read(buf, binary.LittleEndian, &m.T.Sec); err != nil {
		return err
	}
	if err = binary.Read(buf, binary.LittleEndian, &m.T.NSec); err != nil {
		return err
	}

	// D
	if err = binary.Read(buf, binary.LittleEndian, &m.D.Sec); err != nil {
		return err
	}
	if err = binary.Read(buf, binary.LittleEndian, &m.D.NSec); err != nil {
		return err
	}

	// S
	{
		var size uint32
		if err = binary.Read(buf, binary.LittleEndian, &size); err != nil {
			return err
		}
		data := make([]byte, int(size))
		if err = binary.Read(buf, binary.LittleEndian, data); err != nil {
			return err
		}
		m.S = string(data)
	}

	// DynAry
	{
		var size uint32
		if err = binary.Read(buf, binary.LittleEndian, &size); err != nil {
			return err
		}
		m.DynAry = make([]uint32, int(size))
		for i := 0; i < int(size); i++ {
			if err = binary.Read(buf, binary.LittleEndian, &m.DynAry[i]); err != nil {
				return err
			}
		}
	}

	// FixAry
	{
		var size uint32
		if err = binary.Read(buf, binary.LittleEndian, &size); err != nil {
			return err
		}
		if size > 2 {
			return fmt.Errorf("array size for FixAry too large: expected=2, got=%d", size)
		}
		for i := 0; i < int(size); i++ {
			if err = binary.Read(buf, binary.LittleEndian, &m.FixAry[i]); err != nil {
				return err
			}
		}
	}

	return
}
