// Code generated by ros-gen-go.
// source: /opt/ros/jade/share/ros/../actionlib_msgs/msg//GoalID.msg
// DO NOT EDIT!
package actionlib_msgs

type _MsgGoalID struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgGoalID) Text() string {
	return t.text
}

func (t *_MsgGoalID) Name() string {
	return t.name
}

func (t *_MsgGoalID) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgGoalID) NewMessage() ros.Message {
	m := new(GoalID)

	return m
}

var (
	MsgGoalID = &_MsgGoalID{
		`# The stamp should store the time at which this goal was requested.
# It is used by an action server when it tries to preempt all
# goals that were requested before a certain time
time stamp

# The id provides a way to associate feedback and
# result message with specific goal requests. The id
# specified must be unique.
string id

`,
		"actionlib_msgs/GoalID",
		"80cf13439fb52033034dd028f646e989",
	}
)

type GoalID struct {
	Stamp ros.Time
	ID    string
}

func (m *GoalID) Type() ros.MessageType {
	return MsgGoalID
}

func (m *GoalID) Serialize(buf *bytes.Buffer) (err error) {
	// Stamp
	binary.Write(buf, binary.LittleEndian, m.Stamp.Sec)
	binary.Write(buf, binary.LittleEndian, m.Stamp.NSec)

	// ID
	binary.Write(buf, binary.LittleEndian, uint32(len([]byte(m.ID))))
	buf.Write([]byte(m.ID))

	return
}

func (m *String) Deserialize(buf *bytes.Reader) (err error) {
	// Stamp
	if err = binary.Read(buf, binary.LittleEndian, &m.Stamp.Sec); err != nil {
		return err
	}
	if err = binary.Read(buf, binary.LittleEndian, &m.Stamp.NSec); err != nil {
		return err
	}

	// ID
	var size uint32
	if err = binary.Read(buf, binary.LittleEndian, &size); err != nil {
		return err
	}
	data := make([]byte, int(size))
	if err = binary.Read(buf, binary.LittleEndian, data); err != nil {
		return err
	}
	m.ID = string(data)

	return
}
