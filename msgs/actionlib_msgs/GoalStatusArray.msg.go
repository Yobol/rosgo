// Code generated by ros-gen-go.
// source: GoalStatusArray.msg
// DO NOT EDIT!
package actionlib_msgs

import (
	"io"
	"encoding/binary"
	"fmt"

	"github.com/ppg/rosgo/ros"
	"github.com/ppg/rosgo/msgs/std_msgs"
)

type _MsgGoalStatusArray struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgGoalStatusArray) Text() string {
	return t.text
}

func (t *_MsgGoalStatusArray) Name() string {
	return t.name
}

func (t *_MsgGoalStatusArray) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgGoalStatusArray) NewMessage() ros.Message {
	m := new(GoalStatusArray)

	return m
}

var (
	MsgGoalStatusArray = &_MsgGoalStatusArray{
		`# Stores the statuses for goals that are currently being tracked
# by an action server
Header header
GoalStatus[] status_list

`,
		"actionlib_msgs/GoalStatusArray",
		"12ef789174f5252c94b427cdb93b2d0a",
	}
)

type GoalStatusArray struct {
	Header     std_msgs.Header
	StatusList []GoalStatus
}

func (m *GoalStatusArray) Type() ros.MessageType {
	return MsgGoalStatusArray
}

func (m *GoalStatusArray) Serialize(w io.Writer) (err error) {
	if err = ros.SerializeMessageField(w, "Header", &m.Header); err != nil {
		return err
	}

	// Write size little endian
	err = binary.Write(w, binary.LittleEndian, uint32(len(m.StatusList)))
	if err != nil {
		return fmt.Errorf("could not write array length: %s", err)
	}
	for _, elem := range m.StatusList {
		if err = ros.SerializeMessageField(w, "GoalStatus", &elem); err != nil {
			return err
		}
	}

	return
}

func (m *GoalStatusArray) Deserialize(r io.Reader) (err error) {
	// Header
	if err = ros.DeserializeMessageField(r, "Header", &m.Header); err != nil {
		return err
	}

	// StatusList
	// Read size little endian
	var size uint32
	if err = binary.Read(r, binary.LittleEndian, &size); err != nil {
		return fmt.Errorf("cannot read array size for StatusList: %s", err)
	}
	m.StatusList = make([]GoalStatus, int(size))
	for i := 0; i < int(size); i++ {
		if err = ros.DeserializeMessageField(r, "GoalStatus", &m.StatusList[i]); err != nil {
			return err
		}
	}

	return
}
