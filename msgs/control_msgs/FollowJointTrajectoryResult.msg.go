// Code generated by ros-gen-go.
// source: /opt/ros/jade/share/ros/../control_msgs/msg//FollowJointTrajectoryResult.msg
// DO NOT EDIT!
package control_msgs

type _MsgFollowJointTrajectoryResult struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgFollowJointTrajectoryResult) Text() string {
	return t.text
}

func (t *_MsgFollowJointTrajectoryResult) Name() string {
	return t.name
}

func (t *_MsgFollowJointTrajectoryResult) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgFollowJointTrajectoryResult) NewMessage() ros.Message {
	m := new(FollowJointTrajectoryResult)

	return m
}

var (
	MsgFollowJointTrajectoryResult = &_MsgFollowJointTrajectoryResult{
		`# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
int32 error_code
int32 SUCCESSFUL = 0
int32 INVALID_GOAL = -1
int32 INVALID_JOINTS = -2
int32 OLD_HEADER_TIMESTAMP = -3
int32 PATH_TOLERANCE_VIOLATED = -4
int32 GOAL_TOLERANCE_VIOLATED = -5

# Human readable description of the error code. Contains complementary
# information that is especially useful when execution fails, for instance:
# - INVALID_GOAL: The reason for the invalid goal (e.g., the requested
#   trajectory is in the past).
# - INVALID_JOINTS: The mismatch between the expected controller joints
#   and those provided in the goal.
# - PATH_TOLERANCE_VIOLATED and GOAL_TOLERANCE_VIOLATED: Which joint
#   violated which tolerance, and by how much.
string error_string

`,
		"control_msgs/FollowJointTrajectoryResult",
		"8814c14eea6988befd0cc8e254fdcc7f",
	}
)

type FollowJointTrajectoryResult struct {
	ErrorCode             int32
	INVALIDGOAL           int32
	INVALIDJOINTS         int32
	OLDHEADERTIMESTAMP    int32
	PATHTOLERANCEVIOLATED int32
	GOALTOLERANCEVIOLATED int32
	ErrorString           string
}

func (m *FollowJointTrajectoryResult) Type() ros.MessageType {
	return MsgFollowJointTrajectoryResult
}

func (m *FollowJointTrajectoryResult) Serialize(buf *bytes.Buffer) (err error) {
	// ErrorCode
	binary.Write(buf, binary.LittleEndian, m.ErrorCode)

	// INVALIDGOAL
	binary.Write(buf, binary.LittleEndian, m.INVALIDGOAL)

	// INVALIDJOINTS
	binary.Write(buf, binary.LittleEndian, m.INVALIDJOINTS)

	// OLDHEADERTIMESTAMP
	binary.Write(buf, binary.LittleEndian, m.OLDHEADERTIMESTAMP)

	// PATHTOLERANCEVIOLATED
	binary.Write(buf, binary.LittleEndian, m.PATHTOLERANCEVIOLATED)

	// GOALTOLERANCEVIOLATED
	binary.Write(buf, binary.LittleEndian, m.GOALTOLERANCEVIOLATED)

	// ErrorString
	binary.Write(buf, binary.LittleEndian, uint32(len([]byte(m.ErrorString))))
	buf.Write([]byte(m.ErrorString))

	return
}

func (m *String) Deserialize(buf *bytes.Reader) (err error) {
	// ErrorCode
	if err = binary.Read(buf, binary.LittleEndian, &m.ErrorCode); err != nil {
		return err
	}

	// INVALIDGOAL
	if err = binary.Read(buf, binary.LittleEndian, &m.INVALIDGOAL); err != nil {
		return err
	}

	// INVALIDJOINTS
	if err = binary.Read(buf, binary.LittleEndian, &m.INVALIDJOINTS); err != nil {
		return err
	}

	// OLDHEADERTIMESTAMP
	if err = binary.Read(buf, binary.LittleEndian, &m.OLDHEADERTIMESTAMP); err != nil {
		return err
	}

	// PATHTOLERANCEVIOLATED
	if err = binary.Read(buf, binary.LittleEndian, &m.PATHTOLERANCEVIOLATED); err != nil {
		return err
	}

	// GOALTOLERANCEVIOLATED
	if err = binary.Read(buf, binary.LittleEndian, &m.GOALTOLERANCEVIOLATED); err != nil {
		return err
	}

	// ErrorString
	var size uint32
	if err = binary.Read(buf, binary.LittleEndian, &size); err != nil {
		return err
	}
	data := make([]byte, int(size))
	if err = binary.Read(buf, binary.LittleEndian, data); err != nil {
		return err
	}
	m.ErrorString = string(data)

	return
}
