// Code generated by ros-gen-go.
// source: GripperCommandAction.msg
// DO NOT EDIT!
package control_msgs

import (
	"io"

	"github.com/ppg/rosgo/ros"
)

type _MsgGripperCommandAction struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgGripperCommandAction) Text() string {
	return t.text
}

func (t *_MsgGripperCommandAction) Name() string {
	return t.name
}

func (t *_MsgGripperCommandAction) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgGripperCommandAction) NewMessage() ros.Message {
	m := new(GripperCommandAction)

	return m
}

var (
	MsgGripperCommandAction = &_MsgGripperCommandAction{
		`# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

GripperCommandActionGoal action_goal
GripperCommandActionResult action_result
GripperCommandActionFeedback action_feedback
`,
		"control_msgs/GripperCommandAction",
		"3c4beda8eaf53846fc63a79ab375a505",
	}
)

type GripperCommandAction struct {
	ActionGoal     GripperCommandActionGoal
	ActionResult   GripperCommandActionResult
	ActionFeedback GripperCommandActionFeedback
}

func (m *GripperCommandAction) Type() ros.MessageType {
	return MsgGripperCommandAction
}

func (m *GripperCommandAction) Serialize(w io.Writer) (err error) {
	if err = ros.SerializeMessageField(w, "GripperCommandActionGoal", &m.ActionGoal); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "GripperCommandActionResult", &m.ActionResult); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "GripperCommandActionFeedback", &m.ActionFeedback); err != nil {
		return err
	}

	return
}

func (m *GripperCommandAction) Deserialize(r io.Reader) (err error) {
	// ActionGoal
	if err = ros.DeserializeMessageField(r, "GripperCommandActionGoal", &m.ActionGoal); err != nil {
		return err
	}

	// ActionResult
	if err = ros.DeserializeMessageField(r, "GripperCommandActionResult", &m.ActionResult); err != nil {
		return err
	}

	// ActionFeedback
	if err = ros.DeserializeMessageField(r, "GripperCommandActionFeedback", &m.ActionFeedback); err != nil {
		return err
	}

	return
}
