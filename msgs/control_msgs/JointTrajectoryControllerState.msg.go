// Code generated by ros-gen-go.
// source: /opt/ros/jade/share/ros/../control_msgs/msg//JointTrajectoryControllerState.msg
// DO NOT EDIT!
package control_msgs

type _MsgJointTrajectoryControllerState struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgJointTrajectoryControllerState) Text() string {
	return t.text
}

func (t *_MsgJointTrajectoryControllerState) Name() string {
	return t.name
}

func (t *_MsgJointTrajectoryControllerState) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgJointTrajectoryControllerState) NewMessage() ros.Message {
	m := new(JointTrajectoryControllerState)

	return m
}

var (
	MsgJointTrajectoryControllerState = &_MsgJointTrajectoryControllerState{
		`Header header
string[] joint_names
trajectory_msgs/JointTrajectoryPoint desired
trajectory_msgs/JointTrajectoryPoint actual
trajectory_msgs/JointTrajectoryPoint error  # Redundant, but useful
`,
		"control_msgs/JointTrajectoryControllerState",
		"48b8c5f5acf532b95d1db268eeba59ce",
	}
)

type JointTrajectoryControllerState struct {
	Header     Header
	JointNames []string
	Desired    trajectory_msgs.JointTrajectoryPoint
	Actual     trajectory_msgs.JointTrajectoryPoint
	Error      trajectory_msgs.JointTrajectoryPoint
}

func (m *JointTrajectoryControllerState) Type() ros.MessageType {
	return MsgJointTrajectoryControllerState
}

func (m *JointTrajectoryControllerState) Serialize(buf *bytes.Buffer) (err error) {
	// Header
	if err = m.Header.Serialize(buf); err != nil {
		return err
	}

	// JointNames
	binary.Write(buf, binary.LittleEndian, uint32(len(m.JointNames)))
	for _, e := range m.JointNames {
		binary.Write(buf, binary.LittleEndian, uint32(len([]byte(e))))
		buf.Write([]byte(e))
	}

	// Desired
	if err = m.Desired.Serialize(buf); err != nil {
		return err
	}

	// Actual
	if err = m.Actual.Serialize(buf); err != nil {
		return err
	}

	// Error
	if err = m.Error.Serialize(buf); err != nil {
		return err
	}

	return
}

func (m *String) Deserialize(buf *bytes.Reader) (err error) {
	// Header
	if err = m.Header.Deserialize(buf); err != nil {
		return err
	}

	// JointNames
	var size uint32
	if err = binary.Read(buf, binary.LittleEndian, &size); err != nil {
		return err
	}
	m.JointNames = make([]string, int(size))
	for i := 0; i < int(size); i++ {
		var size uint32
		if err = binary.Read(buf, binary.LittleEndian, &size); err != nil {
			return err
		}
		data := make([]byte, int(size))
		if err = binary.Read(buf, binary.LittleEndian, data); err != nil {
			return err
		}
		m.JointNames[i] = string(data)
	}

	// Desired
	if err = m.Desired.Deserialize(buf); err != nil {
		return err
	}

	// Actual
	if err = m.Actual.Deserialize(buf); err != nil {
		return err
	}

	// Error
	if err = m.Error.Deserialize(buf); err != nil {
		return err
	}

	return
}
