// Code generated by ros-gen-go.
// source: /opt/ros/jade/share/ros/../control_msgs/msg//PointHeadGoal.msg
// DO NOT EDIT!
package control_msgs

type _MsgPointHeadGoal struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgPointHeadGoal) Text() string {
	return t.text
}

func (t *_MsgPointHeadGoal) Name() string {
	return t.name
}

func (t *_MsgPointHeadGoal) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgPointHeadGoal) NewMessage() ros.Message {
	m := new(PointHeadGoal)

	return m
}

var (
	MsgPointHeadGoal = &_MsgPointHeadGoal{
		`# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
geometry_msgs/PointStamped target
geometry_msgs/Vector3 pointing_axis
string pointing_frame
duration min_duration
float64 max_velocity
`,
		"control_msgs/PointHeadGoal",
		"57514543f8e8c7f50339a60ad52c4524",
	}
)

type PointHeadGoal struct {
	Target        geometry_msgs.PointStamped
	PointingAxis  geometry_msgs.Vector3
	PointingFrame string
	MinDuration   ros.Duration
	MaxVelocity   float64
}

func (m *PointHeadGoal) Type() ros.MessageType {
	return MsgPointHeadGoal
}

func (m *PointHeadGoal) Serialize(buf *bytes.Buffer) (err error) {
	// Target
	if err = m.Target.Serialize(buf); err != nil {
		return err
	}

	// PointingAxis
	if err = m.PointingAxis.Serialize(buf); err != nil {
		return err
	}

	// PointingFrame
	binary.Write(buf, binary.LittleEndian, uint32(len([]byte(m.PointingFrame))))
	buf.Write([]byte(m.PointingFrame))

	// MinDuration
	binary.Write(buf, binary.LittleEndian, m.MinDuration.Sec)
	binary.Write(buf, binary.LittleEndian, m.MinDuration.NSec)

	// MaxVelocity
	binary.Write(buf, binary.LittleEndian, m.MaxVelocity)

	return
}

func (m *String) Deserialize(buf *bytes.Reader) (err error) {
	// Target
	if err = m.Target.Deserialize(buf); err != nil {
		return err
	}

	// PointingAxis
	if err = m.PointingAxis.Deserialize(buf); err != nil {
		return err
	}

	// PointingFrame
	var size uint32
	if err = binary.Read(buf, binary.LittleEndian, &size); err != nil {
		return err
	}
	data := make([]byte, int(size))
	if err = binary.Read(buf, binary.LittleEndian, data); err != nil {
		return err
	}
	m.PointingFrame = string(data)

	// MinDuration
	if err = binary.Read(buf, binary.LittleEndian, &m.MinDuration.Sec); err != nil {
		return err
	}
	if err = binary.Read(buf, binary.LittleEndian, &m.MinDuration.NSec); err != nil {
		return err
	}

	// MaxVelocity
	if err = binary.Read(buf, binary.LittleEndian, &m.MaxVelocity); err != nil {
		return err
	}

	return
}
