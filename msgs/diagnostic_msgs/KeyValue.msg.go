// Code generated by ros-gen-go.
// source: /opt/ros/jade/share/ros/../diagnostic_msgs/msg//KeyValue.msg
// DO NOT EDIT!
package diagnostic_msgs

type _MsgKeyValue struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgKeyValue) Text() string {
	return t.text
}

func (t *_MsgKeyValue) Name() string {
	return t.name
}

func (t *_MsgKeyValue) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgKeyValue) NewMessage() ros.Message {
	m := new(KeyValue)

	return m
}

var (
	MsgKeyValue = &_MsgKeyValue{
		`string key # what to label this value when viewing
string value # a value to track over time
`,
		"diagnostic_msgs/KeyValue",
		"f42b961af7f6947ab0f9555f47ecb4d4",
	}
)

type KeyValue struct {
	Key   string
	Value string
}

func (m *KeyValue) Type() ros.MessageType {
	return MsgKeyValue
}

func (m *KeyValue) Serialize(buf *bytes.Buffer) (err error) {
	// Key
	binary.Write(buf, binary.LittleEndian, uint32(len([]byte(m.Key))))
	buf.Write([]byte(m.Key))

	// Value
	binary.Write(buf, binary.LittleEndian, uint32(len([]byte(m.Value))))
	buf.Write([]byte(m.Value))

	return
}

func (m *String) Deserialize(buf *bytes.Reader) (err error) {
	// Key
	var size uint32
	if err = binary.Read(buf, binary.LittleEndian, &size); err != nil {
		return err
	}
	data := make([]byte, int(size))
	if err = binary.Read(buf, binary.LittleEndian, data); err != nil {
		return err
	}
	m.Key = string(data)

	// Value
	var size uint32
	if err = binary.Read(buf, binary.LittleEndian, &size); err != nil {
		return err
	}
	data := make([]byte, int(size))
	if err = binary.Read(buf, binary.LittleEndian, data); err != nil {
		return err
	}
	m.Value = string(data)

	return
}
