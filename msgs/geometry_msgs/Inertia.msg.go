// Code generated by ros-gen-go.
// source: /opt/ros/jade/share/ros/../geometry_msgs/msg//Inertia.msg
// DO NOT EDIT!
package geometry_msgs

type _MsgInertia struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgInertia) Text() string {
	return t.text
}

func (t *_MsgInertia) Name() string {
	return t.name
}

func (t *_MsgInertia) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgInertia) NewMessage() ros.Message {
	m := new(Inertia)

	return m
}

var (
	MsgInertia = &_MsgInertia{
		`# Mass [kg]
float64 m

# Center of mass [m]
geometry_msgs/Vector3 com

# Inertia Tensor [kg-m^2]
#     | ixx ixy ixz |
# I = | ixy iyy iyz |
#     | ixz iyz izz |
float64 ixx
float64 ixy
float64 ixz
float64 iyy
float64 iyz
float64 izz
`,
		"geometry_msgs/Inertia",
		"f9eac69d7f8aaf44853616a958d7477f",
	}
)

type Inertia struct {
	M   float64
	Com Vector3
	Ixx float64
	Ixy float64
	Ixz float64
	Iyy float64
	Iyz float64
	Izz float64
}

func (m *Inertia) Type() ros.MessageType {
	return MsgInertia
}

func (m *Inertia) Serialize(buf *bytes.Buffer) (err error) {
	// M
	binary.Write(buf, binary.LittleEndian, m.M)

	// Com
	if err = m.Com.Serialize(buf); err != nil {
		return err
	}

	// Ixx
	binary.Write(buf, binary.LittleEndian, m.Ixx)

	// Ixy
	binary.Write(buf, binary.LittleEndian, m.Ixy)

	// Ixz
	binary.Write(buf, binary.LittleEndian, m.Ixz)

	// Iyy
	binary.Write(buf, binary.LittleEndian, m.Iyy)

	// Iyz
	binary.Write(buf, binary.LittleEndian, m.Iyz)

	// Izz
	binary.Write(buf, binary.LittleEndian, m.Izz)

	return
}

func (m *String) Deserialize(buf *bytes.Reader) (err error) {
	// M
	if err = binary.Read(buf, binary.LittleEndian, &m.M); err != nil {
		return err
	}

	// Com
	if err = m.Com.Deserialize(buf); err != nil {
		return err
	}

	// Ixx
	if err = binary.Read(buf, binary.LittleEndian, &m.Ixx); err != nil {
		return err
	}

	// Ixy
	if err = binary.Read(buf, binary.LittleEndian, &m.Ixy); err != nil {
		return err
	}

	// Ixz
	if err = binary.Read(buf, binary.LittleEndian, &m.Ixz); err != nil {
		return err
	}

	// Iyy
	if err = binary.Read(buf, binary.LittleEndian, &m.Iyy); err != nil {
		return err
	}

	// Iyz
	if err = binary.Read(buf, binary.LittleEndian, &m.Iyz); err != nil {
		return err
	}

	// Izz
	if err = binary.Read(buf, binary.LittleEndian, &m.Izz); err != nil {
		return err
	}

	return
}
