// Code generated by ros-gen-go.
// source: /opt/ros/jade/share/ros/../geometry_msgs/msg//Point32.msg
// DO NOT EDIT!
package geometry_msgs

type _MsgPoint32 struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgPoint32) Text() string {
	return t.text
}

func (t *_MsgPoint32) Name() string {
	return t.name
}

func (t *_MsgPoint32) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgPoint32) NewMessage() ros.Message {
	m := new(Point32)

	return m
}

var (
	MsgPoint32 = &_MsgPoint32{
		`# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z`,
		"geometry_msgs/Point32",
		"5513f8375d33dd96e850d3906e193f4a",
	}
)

type Point32 struct {
	X float32
	Y float32
	Z float32
}

func (m *Point32) Type() ros.MessageType {
	return MsgPoint32
}

func (m *Point32) Serialize(buf *bytes.Buffer) (err error) {
	// X
	binary.Write(buf, binary.LittleEndian, m.X)

	// Y
	binary.Write(buf, binary.LittleEndian, m.Y)

	// Z
	binary.Write(buf, binary.LittleEndian, m.Z)

	return
}

func (m *String) Deserialize(buf *bytes.Reader) (err error) {
	// X
	if err = binary.Read(buf, binary.LittleEndian, &m.X); err != nil {
		return err
	}

	// Y
	if err = binary.Read(buf, binary.LittleEndian, &m.Y); err != nil {
		return err
	}

	// Z
	if err = binary.Read(buf, binary.LittleEndian, &m.Z); err != nil {
		return err
	}

	return
}
