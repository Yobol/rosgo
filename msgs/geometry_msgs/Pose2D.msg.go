// Code generated by ros-gen-go.
// source: /opt/ros/jade/share/ros/../geometry_msgs/msg//Pose2D.msg
// DO NOT EDIT!
package geometry_msgs

type _MsgPose2D struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgPose2D) Text() string {
	return t.text
}

func (t *_MsgPose2D) Name() string {
	return t.name
}

func (t *_MsgPose2D) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgPose2D) NewMessage() ros.Message {
	m := new(Pose2D)

	return m
}

var (
	MsgPose2D = &_MsgPose2D{
		`# This expresses a position and orientation on a 2D manifold.

float64 x
float64 y
float64 theta`,
		"geometry_msgs/Pose2D",
		"4e2f3fce2333423b30f6af38b9f2abd7",
	}
)

type Pose2D struct {
	X     float64
	Y     float64
	Theta float64
}

func (m *Pose2D) Type() ros.MessageType {
	return MsgPose2D
}

func (m *Pose2D) Serialize(buf *bytes.Buffer) (err error) {
	// X
	binary.Write(buf, binary.LittleEndian, m.X)

	// Y
	binary.Write(buf, binary.LittleEndian, m.Y)

	// Theta
	binary.Write(buf, binary.LittleEndian, m.Theta)

	return
}

func (m *String) Deserialize(buf *bytes.Reader) (err error) {
	// X
	if err = binary.Read(buf, binary.LittleEndian, &m.X); err != nil {
		return err
	}

	// Y
	if err = binary.Read(buf, binary.LittleEndian, &m.Y); err != nil {
		return err
	}

	// Theta
	if err = binary.Read(buf, binary.LittleEndian, &m.Theta); err != nil {
		return err
	}

	return
}
