// Code generated by ros-gen-go.
// source: /opt/ros/jade/share/ros/../geometry_msgs/msg//PoseArray.msg
// DO NOT EDIT!
package geometry_msgs

type _MsgPoseArray struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgPoseArray) Text() string {
	return t.text
}

func (t *_MsgPoseArray) Name() string {
	return t.name
}

func (t *_MsgPoseArray) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgPoseArray) NewMessage() ros.Message {
	m := new(PoseArray)

	return m
}

var (
	MsgPoseArray = &_MsgPoseArray{
		`# An array of poses with a header for global reference.

Header header

Pose[] poses
`,
		"geometry_msgs/PoseArray",
		"5f3f794301c7af61b3beab5b9997bb64",
	}
)

type PoseArray struct {
	Header Header
	Poses  []Pose
}

func (m *PoseArray) Type() ros.MessageType {
	return MsgPoseArray
}

func (m *PoseArray) Serialize(buf *bytes.Buffer) (err error) {
	// Header
	if err = m.Header.Serialize(buf); err != nil {
		return err
	}

	// Poses
	binary.Write(buf, binary.LittleEndian, uint32(len(m.Poses)))
	for _, e := range m.Poses {
		if err = e.Serialize(buf); err != nil {
			return err
		}
	}

	return
}

func (m *String) Deserialize(buf *bytes.Reader) (err error) {
	// Header
	if err = m.Header.Deserialize(buf); err != nil {
		return err
	}

	// Poses
	var size uint32
	if err = binary.Read(buf, binary.LittleEndian, &size); err != nil {
		return err
	}
	m.Poses = make([]Pose, int(size))
	for i := 0; i < int(size); i++ {
		if err = m.Poses[i].Deserialize(buf); err != nil {
			return err
		}
	}

	return
}
