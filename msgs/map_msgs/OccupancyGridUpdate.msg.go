// Code generated by ros-gen-go.
// source: /opt/ros/jade/share/ros/../map_msgs/msg//OccupancyGridUpdate.msg
// DO NOT EDIT!
package map_msgs

type _MsgOccupancyGridUpdate struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgOccupancyGridUpdate) Text() string {
	return t.text
}

func (t *_MsgOccupancyGridUpdate) Name() string {
	return t.name
}

func (t *_MsgOccupancyGridUpdate) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgOccupancyGridUpdate) NewMessage() ros.Message {
	m := new(OccupancyGridUpdate)

	return m
}

var (
	MsgOccupancyGridUpdate = &_MsgOccupancyGridUpdate{
		`Header header
int32 x
int32 y
uint32 width
uint32 height
int8[] data
`,
		"map_msgs/OccupancyGridUpdate",
		"0e77ea0b2c75ef93e687bbf87cbdb9b5",
	}
)

type OccupancyGridUpdate struct {
	Header Header
	X      int32
	Y      int32
	Width  uint32
	Height uint32
	Data   []int8
}

func (m *OccupancyGridUpdate) Type() ros.MessageType {
	return MsgOccupancyGridUpdate
}

func (m *OccupancyGridUpdate) Serialize(buf *bytes.Buffer) (err error) {
	// Header
	if err = m.Header.Serialize(buf); err != nil {
		return err
	}

	// X
	binary.Write(buf, binary.LittleEndian, m.X)

	// Y
	binary.Write(buf, binary.LittleEndian, m.Y)

	// Width
	binary.Write(buf, binary.LittleEndian, m.Width)

	// Height
	binary.Write(buf, binary.LittleEndian, m.Height)

	// Data
	binary.Write(buf, binary.LittleEndian, uint32(len(m.Data)))
	for _, e := range m.Data {
		binary.Write(buf, binary.LittleEndian, e)
	}

	return
}

func (m *String) Deserialize(buf *bytes.Reader) (err error) {
	// Header
	if err = m.Header.Deserialize(buf); err != nil {
		return err
	}

	// X
	if err = binary.Read(buf, binary.LittleEndian, &m.X); err != nil {
		return err
	}

	// Y
	if err = binary.Read(buf, binary.LittleEndian, &m.Y); err != nil {
		return err
	}

	// Width
	if err = binary.Read(buf, binary.LittleEndian, &m.Width); err != nil {
		return err
	}

	// Height
	if err = binary.Read(buf, binary.LittleEndian, &m.Height); err != nil {
		return err
	}

	// Data
	var size uint32
	if err = binary.Read(buf, binary.LittleEndian, &size); err != nil {
		return err
	}
	m.Data = make([]int8, int(size))
	for i := 0; i < int(size); i++ {
		if err = binary.Read(buf, binary.LittleEndian, &m.Data[i]); err != nil {
			return err
		}
	}

	return
}
