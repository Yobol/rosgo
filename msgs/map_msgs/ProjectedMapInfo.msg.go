// Code generated by ros-gen-go.
// source: /opt/ros/jade/share/ros/../map_msgs/msg//ProjectedMapInfo.msg
// DO NOT EDIT!
package map_msgs

type _MsgProjectedMapInfo struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgProjectedMapInfo) Text() string {
	return t.text
}

func (t *_MsgProjectedMapInfo) Name() string {
	return t.name
}

func (t *_MsgProjectedMapInfo) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgProjectedMapInfo) NewMessage() ros.Message {
	m := new(ProjectedMapInfo)

	return m
}

var (
	MsgProjectedMapInfo = &_MsgProjectedMapInfo{
		`string frame_id
float64 x
float64 y
float64 width
float64 height
float64 min_z
float64 max_z`,
		"map_msgs/ProjectedMapInfo",
		"2dc10595ae94de23f22f8a6d2a0eef7a",
	}
)

type ProjectedMapInfo struct {
	FrameID string
	X       float64
	Y       float64
	Width   float64
	Height  float64
	MinZ    float64
	MaxZ    float64
}

func (m *ProjectedMapInfo) Type() ros.MessageType {
	return MsgProjectedMapInfo
}

func (m *ProjectedMapInfo) Serialize(buf *bytes.Buffer) (err error) {
	// FrameID
	binary.Write(buf, binary.LittleEndian, uint32(len([]byte(m.FrameID))))
	buf.Write([]byte(m.FrameID))

	// X
	binary.Write(buf, binary.LittleEndian, m.X)

	// Y
	binary.Write(buf, binary.LittleEndian, m.Y)

	// Width
	binary.Write(buf, binary.LittleEndian, m.Width)

	// Height
	binary.Write(buf, binary.LittleEndian, m.Height)

	// MinZ
	binary.Write(buf, binary.LittleEndian, m.MinZ)

	// MaxZ
	binary.Write(buf, binary.LittleEndian, m.MaxZ)

	return
}

func (m *String) Deserialize(buf *bytes.Reader) (err error) {
	// FrameID
	var size uint32
	if err = binary.Read(buf, binary.LittleEndian, &size); err != nil {
		return err
	}
	data := make([]byte, int(size))
	if err = binary.Read(buf, binary.LittleEndian, data); err != nil {
		return err
	}
	m.FrameID = string(data)

	// X
	if err = binary.Read(buf, binary.LittleEndian, &m.X); err != nil {
		return err
	}

	// Y
	if err = binary.Read(buf, binary.LittleEndian, &m.Y); err != nil {
		return err
	}

	// Width
	if err = binary.Read(buf, binary.LittleEndian, &m.Width); err != nil {
		return err
	}

	// Height
	if err = binary.Read(buf, binary.LittleEndian, &m.Height); err != nil {
		return err
	}

	// MinZ
	if err = binary.Read(buf, binary.LittleEndian, &m.MinZ); err != nil {
		return err
	}

	// MaxZ
	if err = binary.Read(buf, binary.LittleEndian, &m.MaxZ); err != nil {
		return err
	}

	return
}
