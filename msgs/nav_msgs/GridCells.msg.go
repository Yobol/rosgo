// Code generated by ros-gen-go.
// source: /opt/ros/jade/share/ros/../nav_msgs/msg//GridCells.msg
// DO NOT EDIT!
package nav_msgs

type _MsgGridCells struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgGridCells) Text() string {
	return t.text
}

func (t *_MsgGridCells) Name() string {
	return t.name
}

func (t *_MsgGridCells) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgGridCells) NewMessage() ros.Message {
	m := new(GridCells)

	return m
}

var (
	MsgGridCells = &_MsgGridCells{
		`#an array of cells in a 2D grid
Header header
float32 cell_width
float32 cell_height
geometry_msgs/Point[] cells
`,
		"nav_msgs/GridCells",
		"7d008f8c0330939c0a1d8ef8feb2f6c7",
	}
)

type GridCells struct {
	Header     Header
	CellWidth  float32
	CellHeight float32
	Cells      []geometry_msgs.Point
}

func (m *GridCells) Type() ros.MessageType {
	return MsgGridCells
}

func (m *GridCells) Serialize(buf *bytes.Buffer) (err error) {
	// Header
	if err = m.Header.Serialize(buf); err != nil {
		return err
	}

	// CellWidth
	binary.Write(buf, binary.LittleEndian, m.CellWidth)

	// CellHeight
	binary.Write(buf, binary.LittleEndian, m.CellHeight)

	// Cells
	binary.Write(buf, binary.LittleEndian, uint32(len(m.Cells)))
	for _, e := range m.Cells {
		if err = e.Serialize(buf); err != nil {
			return err
		}
	}

	return
}

func (m *String) Deserialize(buf *bytes.Reader) (err error) {
	// Header
	if err = m.Header.Deserialize(buf); err != nil {
		return err
	}

	// CellWidth
	if err = binary.Read(buf, binary.LittleEndian, &m.CellWidth); err != nil {
		return err
	}

	// CellHeight
	if err = binary.Read(buf, binary.LittleEndian, &m.CellHeight); err != nil {
		return err
	}

	// Cells
	var size uint32
	if err = binary.Read(buf, binary.LittleEndian, &size); err != nil {
		return err
	}
	m.Cells = make([]geometry_msgs.Point, int(size))
	for i := 0; i < int(size); i++ {
		if err = m.Cells[i].Deserialize(buf); err != nil {
			return err
		}
	}

	return
}
