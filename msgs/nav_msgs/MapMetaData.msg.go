// Code generated by ros-gen-go.
// source: /opt/ros/jade/share/ros/../nav_msgs/msg//MapMetaData.msg
// DO NOT EDIT!
package nav_msgs

type _MsgMapMetaData struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgMapMetaData) Text() string {
	return t.text
}

func (t *_MsgMapMetaData) Name() string {
	return t.name
}

func (t *_MsgMapMetaData) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgMapMetaData) NewMessage() ros.Message {
	m := new(MapMetaData)

	return m
}

var (
	MsgMapMetaData = &_MsgMapMetaData{
		`# This hold basic information about the characterists of the OccupancyGrid

# The time at which the map was loaded
time map_load_time
# The map resolution [m/cell]
float32 resolution
# Map width [cells]
uint32 width
# Map height [cells]
uint32 height
# The origin of the map [m, m, rad].  This is the real-world pose of the
# cell (0,0) in the map.
geometry_msgs/Pose origin`,
		"nav_msgs/MapMetaData",
		"84f12218a664df5896e1e5f18e75d1b0",
	}
)

type MapMetaData struct {
	MapLoadTime ros.Time
	Resolution  float32
	Width       uint32
	Height      uint32
	Origin      geometry_msgs.Pose
}

func (m *MapMetaData) Type() ros.MessageType {
	return MsgMapMetaData
}

func (m *MapMetaData) Serialize(buf *bytes.Buffer) (err error) {
	// MapLoadTime
	binary.Write(buf, binary.LittleEndian, m.MapLoadTime.Sec)
	binary.Write(buf, binary.LittleEndian, m.MapLoadTime.NSec)

	// Resolution
	binary.Write(buf, binary.LittleEndian, m.Resolution)

	// Width
	binary.Write(buf, binary.LittleEndian, m.Width)

	// Height
	binary.Write(buf, binary.LittleEndian, m.Height)

	// Origin
	if err = m.Origin.Serialize(buf); err != nil {
		return err
	}

	return
}

func (m *String) Deserialize(buf *bytes.Reader) (err error) {
	// MapLoadTime
	if err = binary.Read(buf, binary.LittleEndian, &m.MapLoadTime.Sec); err != nil {
		return err
	}
	if err = binary.Read(buf, binary.LittleEndian, &m.MapLoadTime.NSec); err != nil {
		return err
	}

	// Resolution
	if err = binary.Read(buf, binary.LittleEndian, &m.Resolution); err != nil {
		return err
	}

	// Width
	if err = binary.Read(buf, binary.LittleEndian, &m.Width); err != nil {
		return err
	}

	// Height
	if err = binary.Read(buf, binary.LittleEndian, &m.Height); err != nil {
		return err
	}

	// Origin
	if err = m.Origin.Deserialize(buf); err != nil {
		return err
	}

	return
}
