// Code generated by ros-gen-go.
// source: /opt/ros/jade/share/ros/../nav_msgs/msg//OccupancyGrid.msg
// DO NOT EDIT!
package nav_msgs

type _MsgOccupancyGrid struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgOccupancyGrid) Text() string {
	return t.text
}

func (t *_MsgOccupancyGrid) Name() string {
	return t.name
}

func (t *_MsgOccupancyGrid) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgOccupancyGrid) NewMessage() ros.Message {
	m := new(OccupancyGrid)

	return m
}

var (
	MsgOccupancyGrid = &_MsgOccupancyGrid{
		`# This represents a 2-D grid map, in which each cell represents the probability of
# occupancy.

Header header 

#MetaData for the map
MapMetaData info

# The map data, in row-major order, starting with (0,0).  Occupancy
# probabilities are in the range [0,100].  Unknown is -1.
int8[] data
`,
		"nav_msgs/OccupancyGrid",
		"2f9ac1b8c6524db490c0657798cd98d5",
	}
)

type OccupancyGrid struct {
	Header Header
	Info   MapMetaData
	Data   []int8
}

func (m *OccupancyGrid) Type() ros.MessageType {
	return MsgOccupancyGrid
}

func (m *OccupancyGrid) Serialize(buf *bytes.Buffer) (err error) {
	// Header
	if err = m.Header.Serialize(buf); err != nil {
		return err
	}

	// Info
	if err = m.Info.Serialize(buf); err != nil {
		return err
	}

	// Data
	binary.Write(buf, binary.LittleEndian, uint32(len(m.Data)))
	for _, e := range m.Data {
		binary.Write(buf, binary.LittleEndian, e)
	}

	return
}

func (m *String) Deserialize(buf *bytes.Reader) (err error) {
	// Header
	if err = m.Header.Deserialize(buf); err != nil {
		return err
	}

	// Info
	if err = m.Info.Deserialize(buf); err != nil {
		return err
	}

	// Data
	var size uint32
	if err = binary.Read(buf, binary.LittleEndian, &size); err != nil {
		return err
	}
	m.Data = make([]int8, int(size))
	for i := 0; i < int(size); i++ {
		if err = binary.Read(buf, binary.LittleEndian, &m.Data[i]); err != nil {
			return err
		}
	}

	return
}
