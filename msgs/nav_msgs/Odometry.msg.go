// Code generated by ros-gen-go.
// source: /opt/ros/jade/share/ros/../nav_msgs/msg//Odometry.msg
// DO NOT EDIT!
package nav_msgs

type _MsgOdometry struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgOdometry) Text() string {
	return t.text
}

func (t *_MsgOdometry) Name() string {
	return t.name
}

func (t *_MsgOdometry) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgOdometry) NewMessage() ros.Message {
	m := new(Odometry)

	return m
}

var (
	MsgOdometry = &_MsgOdometry{
		`# This represents an estimate of a position and velocity in free space.  
# The pose in this message should be specified in the coordinate frame given by header.frame_id.
# The twist in this message should be specified in the coordinate frame given by the child_frame_id
Header header
string child_frame_id
geometry_msgs/PoseWithCovariance pose
geometry_msgs/TwistWithCovariance twist
`,
		"nav_msgs/Odometry",
		"698b128f01737ca3ec6fd7d2eabc226e",
	}
)

type Odometry struct {
	Header       Header
	ChildFrameID string
	Pose         geometry_msgs.PoseWithCovariance
	Twist        geometry_msgs.TwistWithCovariance
}

func (m *Odometry) Type() ros.MessageType {
	return MsgOdometry
}

func (m *Odometry) Serialize(buf *bytes.Buffer) (err error) {
	// Header
	if err = m.Header.Serialize(buf); err != nil {
		return err
	}

	// ChildFrameID
	binary.Write(buf, binary.LittleEndian, uint32(len([]byte(m.ChildFrameID))))
	buf.Write([]byte(m.ChildFrameID))

	// Pose
	if err = m.Pose.Serialize(buf); err != nil {
		return err
	}

	// Twist
	if err = m.Twist.Serialize(buf); err != nil {
		return err
	}

	return
}

func (m *String) Deserialize(buf *bytes.Reader) (err error) {
	// Header
	if err = m.Header.Deserialize(buf); err != nil {
		return err
	}

	// ChildFrameID
	var size uint32
	if err = binary.Read(buf, binary.LittleEndian, &size); err != nil {
		return err
	}
	data := make([]byte, int(size))
	if err = binary.Read(buf, binary.LittleEndian, data); err != nil {
		return err
	}
	m.ChildFrameID = string(data)

	// Pose
	if err = m.Pose.Deserialize(buf); err != nil {
		return err
	}

	// Twist
	if err = m.Twist.Deserialize(buf); err != nil {
		return err
	}

	return
}
