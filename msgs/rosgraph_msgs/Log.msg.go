// Code generated by ros-gen-go.
// source: /opt/ros/jade/share/ros/../rosgraph_msgs/msg//Log.msg
// DO NOT EDIT!
package rosgraph_msgs

type _MsgLog struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgLog) Text() string {
	return t.text
}

func (t *_MsgLog) Name() string {
	return t.name
}

func (t *_MsgLog) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgLog) NewMessage() ros.Message {
	m := new(Log)

	return m
}

var (
	MsgLog = &_MsgLog{
		`##
## Severity level constants
##
byte DEBUG=1 #debug level
byte INFO=2  #general level
byte WARN=4  #warning level
byte ERROR=8 #error level
byte FATAL=16 #fatal/critical level
##
## Fields
##
Header header
byte level
string name # name of the node
string msg # message 
string file # file the message came from
string function # function the message came from
uint32 line # line the message came from
string[] topics # topic names that the node publishes
`,
		"rosgraph_msgs/Log",
		"7e4c0d13ed75610b7a2bb18594155bf8",
	}
)

type Log struct {
	Header   Header
	Level    int8
	Name     string
	Msg      string
	File     string
	Function string
	Line     uint32
	Topics   []string
}

func (m *Log) Type() ros.MessageType {
	return MsgLog
}

func (m *Log) Serialize(buf *bytes.Buffer) (err error) {
	// Header
	if err = m.Header.Serialize(buf); err != nil {
		return err
	}

	// Level
	binary.Write(buf, binary.LittleEndian, m.Level)

	// Name
	binary.Write(buf, binary.LittleEndian, uint32(len([]byte(m.Name))))
	buf.Write([]byte(m.Name))

	// Msg
	binary.Write(buf, binary.LittleEndian, uint32(len([]byte(m.Msg))))
	buf.Write([]byte(m.Msg))

	// File
	binary.Write(buf, binary.LittleEndian, uint32(len([]byte(m.File))))
	buf.Write([]byte(m.File))

	// Function
	binary.Write(buf, binary.LittleEndian, uint32(len([]byte(m.Function))))
	buf.Write([]byte(m.Function))

	// Line
	binary.Write(buf, binary.LittleEndian, m.Line)

	// Topics
	binary.Write(buf, binary.LittleEndian, uint32(len(m.Topics)))
	for _, e := range m.Topics {
		binary.Write(buf, binary.LittleEndian, uint32(len([]byte(e))))
		buf.Write([]byte(e))
	}

	return
}

func (m *String) Deserialize(buf *bytes.Reader) (err error) {
	// Header
	if err = m.Header.Deserialize(buf); err != nil {
		return err
	}

	// Level
	if err = binary.Read(buf, binary.LittleEndian, &m.Level); err != nil {
		return err
	}

	// Name
	var size uint32
	if err = binary.Read(buf, binary.LittleEndian, &size); err != nil {
		return err
	}
	data := make([]byte, int(size))
	if err = binary.Read(buf, binary.LittleEndian, data); err != nil {
		return err
	}
	m.Name = string(data)

	// Msg
	var size uint32
	if err = binary.Read(buf, binary.LittleEndian, &size); err != nil {
		return err
	}
	data := make([]byte, int(size))
	if err = binary.Read(buf, binary.LittleEndian, data); err != nil {
		return err
	}
	m.Msg = string(data)

	// File
	var size uint32
	if err = binary.Read(buf, binary.LittleEndian, &size); err != nil {
		return err
	}
	data := make([]byte, int(size))
	if err = binary.Read(buf, binary.LittleEndian, data); err != nil {
		return err
	}
	m.File = string(data)

	// Function
	var size uint32
	if err = binary.Read(buf, binary.LittleEndian, &size); err != nil {
		return err
	}
	data := make([]byte, int(size))
	if err = binary.Read(buf, binary.LittleEndian, data); err != nil {
		return err
	}
	m.Function = string(data)

	// Line
	if err = binary.Read(buf, binary.LittleEndian, &m.Line); err != nil {
		return err
	}

	// Topics
	var size uint32
	if err = binary.Read(buf, binary.LittleEndian, &size); err != nil {
		return err
	}
	m.Topics = make([]string, int(size))
	for i := 0; i < int(size); i++ {
		var size uint32
		if err = binary.Read(buf, binary.LittleEndian, &size); err != nil {
			return err
		}
		data := make([]byte, int(size))
		if err = binary.Read(buf, binary.LittleEndian, data); err != nil {
			return err
		}
		m.Topics[i] = string(data)
	}

	return
}
