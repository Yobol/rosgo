// Code generated by ros-gen-go.
// source: /opt/ros/jade/share/ros/../rosgraph_msgs/msg//TopicStatistics.msg
// DO NOT EDIT!
package rosgraph_msgs

type _MsgTopicStatistics struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgTopicStatistics) Text() string {
	return t.text
}

func (t *_MsgTopicStatistics) Name() string {
	return t.name
}

func (t *_MsgTopicStatistics) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgTopicStatistics) NewMessage() ros.Message {
	m := new(TopicStatistics)

	return m
}

var (
	MsgTopicStatistics = &_MsgTopicStatistics{
		`# name of the topic
string topic

# node id of the publisher
string node_pub

# node id of the subscriber
string node_sub

# the statistics apply to this time window
time window_start
time window_stop

# number of messages delivered during the window
int32 delivered_msgs
# numbers of messages dropped during the window
int32 dropped_msgs

# traffic during the window, in bytes
int32 traffic

# mean/stddev/max period between two messages
duration period_mean
duration period_stddev
duration period_max

# mean/stddev/max age of the message based on the
# timestamp in the message header. In case the
# message does not have a header, it will be 0.
duration stamp_age_mean
duration stamp_age_stddev
duration stamp_age_max
`,
		"rosgraph_msgs/TopicStatistics",
		"af8d88facaf0dd2a8692bed50ab41bda",
	}
)

type TopicStatistics struct {
	Topic          string
	NodePub        string
	NodeSub        string
	WindowStart    ros.Time
	WindowStop     ros.Time
	DeliveredMsgs  int32
	DroppedMsgs    int32
	Traffic        int32
	PeriodMean     ros.Duration
	PeriodStddev   ros.Duration
	PeriodMax      ros.Duration
	StampAgeMean   ros.Duration
	StampAgeStddev ros.Duration
	StampAgeMax    ros.Duration
}

func (m *TopicStatistics) Type() ros.MessageType {
	return MsgTopicStatistics
}

func (m *TopicStatistics) Serialize(buf *bytes.Buffer) (err error) {
	// Topic
	binary.Write(buf, binary.LittleEndian, uint32(len([]byte(m.Topic))))
	buf.Write([]byte(m.Topic))

	// NodePub
	binary.Write(buf, binary.LittleEndian, uint32(len([]byte(m.NodePub))))
	buf.Write([]byte(m.NodePub))

	// NodeSub
	binary.Write(buf, binary.LittleEndian, uint32(len([]byte(m.NodeSub))))
	buf.Write([]byte(m.NodeSub))

	// WindowStart
	binary.Write(buf, binary.LittleEndian, m.WindowStart.Sec)
	binary.Write(buf, binary.LittleEndian, m.WindowStart.NSec)

	// WindowStop
	binary.Write(buf, binary.LittleEndian, m.WindowStop.Sec)
	binary.Write(buf, binary.LittleEndian, m.WindowStop.NSec)

	// DeliveredMsgs
	binary.Write(buf, binary.LittleEndian, m.DeliveredMsgs)

	// DroppedMsgs
	binary.Write(buf, binary.LittleEndian, m.DroppedMsgs)

	// Traffic
	binary.Write(buf, binary.LittleEndian, m.Traffic)

	// PeriodMean
	binary.Write(buf, binary.LittleEndian, m.PeriodMean.Sec)
	binary.Write(buf, binary.LittleEndian, m.PeriodMean.NSec)

	// PeriodStddev
	binary.Write(buf, binary.LittleEndian, m.PeriodStddev.Sec)
	binary.Write(buf, binary.LittleEndian, m.PeriodStddev.NSec)

	// PeriodMax
	binary.Write(buf, binary.LittleEndian, m.PeriodMax.Sec)
	binary.Write(buf, binary.LittleEndian, m.PeriodMax.NSec)

	// StampAgeMean
	binary.Write(buf, binary.LittleEndian, m.StampAgeMean.Sec)
	binary.Write(buf, binary.LittleEndian, m.StampAgeMean.NSec)

	// StampAgeStddev
	binary.Write(buf, binary.LittleEndian, m.StampAgeStddev.Sec)
	binary.Write(buf, binary.LittleEndian, m.StampAgeStddev.NSec)

	// StampAgeMax
	binary.Write(buf, binary.LittleEndian, m.StampAgeMax.Sec)
	binary.Write(buf, binary.LittleEndian, m.StampAgeMax.NSec)

	return
}

func (m *String) Deserialize(buf *bytes.Reader) (err error) {
	// Topic
	var size uint32
	if err = binary.Read(buf, binary.LittleEndian, &size); err != nil {
		return err
	}
	data := make([]byte, int(size))
	if err = binary.Read(buf, binary.LittleEndian, data); err != nil {
		return err
	}
	m.Topic = string(data)

	// NodePub
	var size uint32
	if err = binary.Read(buf, binary.LittleEndian, &size); err != nil {
		return err
	}
	data := make([]byte, int(size))
	if err = binary.Read(buf, binary.LittleEndian, data); err != nil {
		return err
	}
	m.NodePub = string(data)

	// NodeSub
	var size uint32
	if err = binary.Read(buf, binary.LittleEndian, &size); err != nil {
		return err
	}
	data := make([]byte, int(size))
	if err = binary.Read(buf, binary.LittleEndian, data); err != nil {
		return err
	}
	m.NodeSub = string(data)

	// WindowStart
	if err = binary.Read(buf, binary.LittleEndian, &m.WindowStart.Sec); err != nil {
		return err
	}
	if err = binary.Read(buf, binary.LittleEndian, &m.WindowStart.NSec); err != nil {
		return err
	}

	// WindowStop
	if err = binary.Read(buf, binary.LittleEndian, &m.WindowStop.Sec); err != nil {
		return err
	}
	if err = binary.Read(buf, binary.LittleEndian, &m.WindowStop.NSec); err != nil {
		return err
	}

	// DeliveredMsgs
	if err = binary.Read(buf, binary.LittleEndian, &m.DeliveredMsgs); err != nil {
		return err
	}

	// DroppedMsgs
	if err = binary.Read(buf, binary.LittleEndian, &m.DroppedMsgs); err != nil {
		return err
	}

	// Traffic
	if err = binary.Read(buf, binary.LittleEndian, &m.Traffic); err != nil {
		return err
	}

	// PeriodMean
	if err = binary.Read(buf, binary.LittleEndian, &m.PeriodMean.Sec); err != nil {
		return err
	}
	if err = binary.Read(buf, binary.LittleEndian, &m.PeriodMean.NSec); err != nil {
		return err
	}

	// PeriodStddev
	if err = binary.Read(buf, binary.LittleEndian, &m.PeriodStddev.Sec); err != nil {
		return err
	}
	if err = binary.Read(buf, binary.LittleEndian, &m.PeriodStddev.NSec); err != nil {
		return err
	}

	// PeriodMax
	if err = binary.Read(buf, binary.LittleEndian, &m.PeriodMax.Sec); err != nil {
		return err
	}
	if err = binary.Read(buf, binary.LittleEndian, &m.PeriodMax.NSec); err != nil {
		return err
	}

	// StampAgeMean
	if err = binary.Read(buf, binary.LittleEndian, &m.StampAgeMean.Sec); err != nil {
		return err
	}
	if err = binary.Read(buf, binary.LittleEndian, &m.StampAgeMean.NSec); err != nil {
		return err
	}

	// StampAgeStddev
	if err = binary.Read(buf, binary.LittleEndian, &m.StampAgeStddev.Sec); err != nil {
		return err
	}
	if err = binary.Read(buf, binary.LittleEndian, &m.StampAgeStddev.NSec); err != nil {
		return err
	}

	// StampAgeMax
	if err = binary.Read(buf, binary.LittleEndian, &m.StampAgeMax.Sec); err != nil {
		return err
	}
	if err = binary.Read(buf, binary.LittleEndian, &m.StampAgeMax.NSec); err != nil {
		return err
	}

	return
}
