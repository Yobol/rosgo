// Code generated by ros-gen-go.
// source: /opt/ros/jade/share/ros/../sensor_msgs/msg//CompressedImage.msg
// DO NOT EDIT!
package sensor_msgs

type _MsgCompressedImage struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgCompressedImage) Text() string {
	return t.text
}

func (t *_MsgCompressedImage) Name() string {
	return t.name
}

func (t *_MsgCompressedImage) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgCompressedImage) NewMessage() ros.Message {
	m := new(CompressedImage)

	return m
}

var (
	MsgCompressedImage = &_MsgCompressedImage{
		`# This message contains a compressed image

Header header        # Header timestamp should be acquisition time of image
                     # Header frame_id should be optical frame of camera
                     # origin of frame should be optical center of cameara
                     # +x should point to the right in the image
                     # +y should point down in the image
                     # +z should point into to plane of the image

string format        # Specifies the format of the data
                     #   Acceptable values:
                     #     jpeg, png
uint8[] data         # Compressed image buffer
`,
		"sensor_msgs/CompressedImage",
		"d3795018f0b7f0b8b50b7ea3b4a7519b",
	}
)

type CompressedImage struct {
	Header Header
	Format string
	Data   []uint8
}

func (m *CompressedImage) Type() ros.MessageType {
	return MsgCompressedImage
}

func (m *CompressedImage) Serialize(buf *bytes.Buffer) (err error) {
	// Header
	if err = m.Header.Serialize(buf); err != nil {
		return err
	}

	// Format
	binary.Write(buf, binary.LittleEndian, uint32(len([]byte(m.Format))))
	buf.Write([]byte(m.Format))

	// Data
	binary.Write(buf, binary.LittleEndian, uint32(len(m.Data)))
	for _, e := range m.Data {
		binary.Write(buf, binary.LittleEndian, e)
	}

	return
}

func (m *String) Deserialize(buf *bytes.Reader) (err error) {
	// Header
	if err = m.Header.Deserialize(buf); err != nil {
		return err
	}

	// Format
	var size uint32
	if err = binary.Read(buf, binary.LittleEndian, &size); err != nil {
		return err
	}
	data := make([]byte, int(size))
	if err = binary.Read(buf, binary.LittleEndian, data); err != nil {
		return err
	}
	m.Format = string(data)

	// Data
	var size uint32
	if err = binary.Read(buf, binary.LittleEndian, &size); err != nil {
		return err
	}
	m.Data = make([]uint8, int(size))
	for i := 0; i < int(size); i++ {
		if err = binary.Read(buf, binary.LittleEndian, &m.Data[i]); err != nil {
			return err
		}
	}

	return
}
