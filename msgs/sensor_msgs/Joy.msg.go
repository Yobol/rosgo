// Code generated by ros-gen-go.
// source: /opt/ros/jade/share/ros/../sensor_msgs/msg//Joy.msg
// DO NOT EDIT!
package sensor_msgs

type _MsgJoy struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgJoy) Text() string {
	return t.text
}

func (t *_MsgJoy) Name() string {
	return t.name
}

func (t *_MsgJoy) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgJoy) NewMessage() ros.Message {
	m := new(Joy)

	return m
}

var (
	MsgJoy = &_MsgJoy{
		`# Reports the state of a joysticks axes and buttons.
Header header           # timestamp in the header is the time the data is received from the joystick
float32[] axes          # the axes measurements from a joystick
int32[] buttons         # the buttons measurements from a joystick 
`,
		"sensor_msgs/Joy",
		"3575d357a5c35c83d263fbb0c5bf3988",
	}
)

type Joy struct {
	Header  Header
	Axes    []float32
	Buttons []int32
}

func (m *Joy) Type() ros.MessageType {
	return MsgJoy
}

func (m *Joy) Serialize(buf *bytes.Buffer) (err error) {
	// Header
	if err = m.Header.Serialize(buf); err != nil {
		return err
	}

	// Axes
	binary.Write(buf, binary.LittleEndian, uint32(len(m.Axes)))
	for _, e := range m.Axes {
		binary.Write(buf, binary.LittleEndian, e)
	}

	// Buttons
	binary.Write(buf, binary.LittleEndian, uint32(len(m.Buttons)))
	for _, e := range m.Buttons {
		binary.Write(buf, binary.LittleEndian, e)
	}

	return
}

func (m *String) Deserialize(buf *bytes.Reader) (err error) {
	// Header
	if err = m.Header.Deserialize(buf); err != nil {
		return err
	}

	// Axes
	var size uint32
	if err = binary.Read(buf, binary.LittleEndian, &size); err != nil {
		return err
	}
	m.Axes = make([]float32, int(size))
	for i := 0; i < int(size); i++ {
		if err = binary.Read(buf, binary.LittleEndian, &m.Axes[i]); err != nil {
			return err
		}
	}

	// Buttons
	var size uint32
	if err = binary.Read(buf, binary.LittleEndian, &size); err != nil {
		return err
	}
	m.Buttons = make([]int32, int(size))
	for i := 0; i < int(size); i++ {
		if err = binary.Read(buf, binary.LittleEndian, &m.Buttons[i]); err != nil {
			return err
		}
	}

	return
}
