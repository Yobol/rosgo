// Code generated by ros-gen-go.
// source: /opt/ros/jade/share/ros/../sensor_msgs/msg//JoyFeedbackArray.msg
// DO NOT EDIT!
package sensor_msgs

type _MsgJoyFeedbackArray struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgJoyFeedbackArray) Text() string {
	return t.text
}

func (t *_MsgJoyFeedbackArray) Name() string {
	return t.name
}

func (t *_MsgJoyFeedbackArray) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgJoyFeedbackArray) NewMessage() ros.Message {
	m := new(JoyFeedbackArray)

	return m
}

var (
	MsgJoyFeedbackArray = &_MsgJoyFeedbackArray{
		`# This message publishes values for multiple feedback at once. 
JoyFeedback[] array`,
		"sensor_msgs/JoyFeedbackArray",
		"bdbcb223d565a59aeff3f78ba874e698",
	}
)

type JoyFeedbackArray struct {
	Array []JoyFeedback
}

func (m *JoyFeedbackArray) Type() ros.MessageType {
	return MsgJoyFeedbackArray
}

func (m *JoyFeedbackArray) Serialize(buf *bytes.Buffer) (err error) {
	// Array
	binary.Write(buf, binary.LittleEndian, uint32(len(m.Array)))
	for _, e := range m.Array {
		if err = e.Serialize(buf); err != nil {
			return err
		}
	}

	return
}

func (m *String) Deserialize(buf *bytes.Reader) (err error) {
	// Array
	var size uint32
	if err = binary.Read(buf, binary.LittleEndian, &size); err != nil {
		return err
	}
	m.Array = make([]JoyFeedback, int(size))
	for i := 0; i < int(size); i++ {
		if err = m.Array[i].Deserialize(buf); err != nil {
			return err
		}
	}

	return
}
