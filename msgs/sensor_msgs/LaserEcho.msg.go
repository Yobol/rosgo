// Code generated by ros-gen-go.
// source: /opt/ros/jade/share/ros/../sensor_msgs/msg//LaserEcho.msg
// DO NOT EDIT!
package sensor_msgs

type _MsgLaserEcho struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgLaserEcho) Text() string {
	return t.text
}

func (t *_MsgLaserEcho) Name() string {
	return t.name
}

func (t *_MsgLaserEcho) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgLaserEcho) NewMessage() ros.Message {
	m := new(LaserEcho)

	return m
}

var (
	MsgLaserEcho = &_MsgLaserEcho{
		`# This message is a submessage of MultiEchoLaserScan and is not intended
# to be used separately.

float32[] echoes  # Multiple values of ranges or intensities.
                  # Each array represents data from the same angle increment.`,
		"sensor_msgs/LaserEcho",
		"a3954a3a9a7d9a6a5e18f4d98439be09",
	}
)

type LaserEcho struct {
	Echoes []float32
}

func (m *LaserEcho) Type() ros.MessageType {
	return MsgLaserEcho
}

func (m *LaserEcho) Serialize(buf *bytes.Buffer) (err error) {
	// Echoes
	binary.Write(buf, binary.LittleEndian, uint32(len(m.Echoes)))
	for _, e := range m.Echoes {
		binary.Write(buf, binary.LittleEndian, e)
	}

	return
}

func (m *String) Deserialize(buf *bytes.Reader) (err error) {
	// Echoes
	var size uint32
	if err = binary.Read(buf, binary.LittleEndian, &size); err != nil {
		return err
	}
	m.Echoes = make([]float32, int(size))
	for i := 0; i < int(size); i++ {
		if err = binary.Read(buf, binary.LittleEndian, &m.Echoes[i]); err != nil {
			return err
		}
	}

	return
}
