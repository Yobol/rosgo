// Code generated by ros-gen-go.
// source: /opt/ros/jade/share/ros/../sensor_msgs/msg//PointField.msg
// DO NOT EDIT!
package sensor_msgs

type _MsgPointField struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgPointField) Text() string {
	return t.text
}

func (t *_MsgPointField) Name() string {
	return t.name
}

func (t *_MsgPointField) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgPointField) NewMessage() ros.Message {
	m := new(PointField)

	return m
}

var (
	MsgPointField = &_MsgPointField{
		`# This message holds the description of one point entry in the
# PointCloud2 message format.
uint8 INT8    = 1
uint8 UINT8   = 2
uint8 INT16   = 3
uint8 UINT16  = 4
uint8 INT32   = 5
uint8 UINT32  = 6
uint8 FLOAT32 = 7
uint8 FLOAT64 = 8

string name      # Name of field
uint32 offset    # Offset from start of point struct
uint8  datatype  # Datatype enumeration, see above
uint32 count     # How many elements in the field
`,
		"sensor_msgs/PointField",
		"e121f1b64f22efa1152073fbaece31b7",
	}
)

type PointField struct {
	Name     string
	Offset   uint32
	Datatype uint8
	Count    uint32
}

func (m *PointField) Type() ros.MessageType {
	return MsgPointField
}

func (m *PointField) Serialize(buf *bytes.Buffer) (err error) {
	// Name
	binary.Write(buf, binary.LittleEndian, uint32(len([]byte(m.Name))))
	buf.Write([]byte(m.Name))

	// Offset
	binary.Write(buf, binary.LittleEndian, m.Offset)

	// Datatype
	binary.Write(buf, binary.LittleEndian, m.Datatype)

	// Count
	binary.Write(buf, binary.LittleEndian, m.Count)

	return
}

func (m *String) Deserialize(buf *bytes.Reader) (err error) {
	// Name
	var size uint32
	if err = binary.Read(buf, binary.LittleEndian, &size); err != nil {
		return err
	}
	data := make([]byte, int(size))
	if err = binary.Read(buf, binary.LittleEndian, data); err != nil {
		return err
	}
	m.Name = string(data)

	// Offset
	if err = binary.Read(buf, binary.LittleEndian, &m.Offset); err != nil {
		return err
	}

	// Datatype
	if err = binary.Read(buf, binary.LittleEndian, &m.Datatype); err != nil {
		return err
	}

	// Count
	if err = binary.Read(buf, binary.LittleEndian, &m.Count); err != nil {
		return err
	}

	return
}
