// Code generated by ros-gen-go.
// source: /opt/ros/jade/share/ros/../sensor_msgs/msg//RelativeHumidity.msg
// DO NOT EDIT!
package sensor_msgs

type _MsgRelativeHumidity struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgRelativeHumidity) Text() string {
	return t.text
}

func (t *_MsgRelativeHumidity) Name() string {
	return t.name
}

func (t *_MsgRelativeHumidity) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgRelativeHumidity) NewMessage() ros.Message {
	m := new(RelativeHumidity)

	return m
}

var (
	MsgRelativeHumidity = &_MsgRelativeHumidity{
		` # Single reading from a relative humidity sensor.  Defines the ratio of partial
 # pressure of water vapor to the saturated vapor pressure at a temperature.

 Header header             # timestamp of the measurement
                           # frame_id is the location of the humidity sensor

 float64 relative_humidity # Expression of the relative humidity
                           # from 0.0 to 1.0.
                           # 0.0 is no partial pressure of water vapor
                           # 1.0 represents partial pressure of saturation

 float64 variance          # 0 is interpreted as variance unknown`,
		"sensor_msgs/RelativeHumidity",
		"baf803f82c25997678cb475199aba400",
	}
)

type RelativeHumidity struct {
	Header           Header
	RelativeHumidity float64
	Variance         float64
}

func (m *RelativeHumidity) Type() ros.MessageType {
	return MsgRelativeHumidity
}

func (m *RelativeHumidity) Serialize(buf *bytes.Buffer) (err error) {
	// Header
	if err = m.Header.Serialize(buf); err != nil {
		return err
	}

	// RelativeHumidity
	binary.Write(buf, binary.LittleEndian, m.RelativeHumidity)

	// Variance
	binary.Write(buf, binary.LittleEndian, m.Variance)

	return
}

func (m *String) Deserialize(buf *bytes.Reader) (err error) {
	// Header
	if err = m.Header.Deserialize(buf); err != nil {
		return err
	}

	// RelativeHumidity
	if err = binary.Read(buf, binary.LittleEndian, &m.RelativeHumidity); err != nil {
		return err
	}

	// Variance
	if err = binary.Read(buf, binary.LittleEndian, &m.Variance); err != nil {
		return err
	}

	return
}
