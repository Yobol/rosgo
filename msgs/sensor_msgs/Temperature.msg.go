// Code generated by ros-gen-go.
// source: /opt/ros/jade/share/ros/../sensor_msgs/msg//Temperature.msg
// DO NOT EDIT!
package sensor_msgs

type _MsgTemperature struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgTemperature) Text() string {
	return t.text
}

func (t *_MsgTemperature) Name() string {
	return t.name
}

func (t *_MsgTemperature) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgTemperature) NewMessage() ros.Message {
	m := new(Temperature)

	return m
}

var (
	MsgTemperature = &_MsgTemperature{
		` # Single temperature reading.

 Header header           # timestamp is the time the temperature was measured
                         # frame_id is the location of the temperature reading

 float64 temperature     # Measurement of the Temperature in Degrees Celsius

 float64 variance        # 0 is interpreted as variance unknown`,
		"sensor_msgs/Temperature",
		"6f4df500b16d1d3a368880d4a5f5d097",
	}
)

type Temperature struct {
	Header      Header
	Temperature float64
	Variance    float64
}

func (m *Temperature) Type() ros.MessageType {
	return MsgTemperature
}

func (m *Temperature) Serialize(buf *bytes.Buffer) (err error) {
	// Header
	if err = m.Header.Serialize(buf); err != nil {
		return err
	}

	// Temperature
	binary.Write(buf, binary.LittleEndian, m.Temperature)

	// Variance
	binary.Write(buf, binary.LittleEndian, m.Variance)

	return
}

func (m *String) Deserialize(buf *bytes.Reader) (err error) {
	// Header
	if err = m.Header.Deserialize(buf); err != nil {
		return err
	}

	// Temperature
	if err = binary.Read(buf, binary.LittleEndian, &m.Temperature); err != nil {
		return err
	}

	// Variance
	if err = binary.Read(buf, binary.LittleEndian, &m.Variance); err != nil {
		return err
	}

	return
}
