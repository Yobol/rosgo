// Code generated by ros-gen-go.
// source: /opt/ros/jade/share/ros/../sensor_msgs/msg//TimeReference.msg
// DO NOT EDIT!
package sensor_msgs

type _MsgTimeReference struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgTimeReference) Text() string {
	return t.text
}

func (t *_MsgTimeReference) Name() string {
	return t.name
}

func (t *_MsgTimeReference) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgTimeReference) NewMessage() ros.Message {
	m := new(TimeReference)

	return m
}

var (
	MsgTimeReference = &_MsgTimeReference{
		`# Measurement from an external time source not actively synchronized with the system clock.

Header header    # stamp is system time for which measurement was valid
                 # frame_id is not used 

time   time_ref  # corresponding time from this external source
string source    # (optional) name of time source
`,
		"sensor_msgs/TimeReference",
		"ef08a08cc0648eb4e42fa2a172b1731a",
	}
)

type TimeReference struct {
	Header  Header
	TimeRef ros.Time
	Source  string
}

func (m *TimeReference) Type() ros.MessageType {
	return MsgTimeReference
}

func (m *TimeReference) Serialize(buf *bytes.Buffer) (err error) {
	// Header
	if err = m.Header.Serialize(buf); err != nil {
		return err
	}

	// TimeRef
	binary.Write(buf, binary.LittleEndian, m.TimeRef.Sec)
	binary.Write(buf, binary.LittleEndian, m.TimeRef.NSec)

	// Source
	binary.Write(buf, binary.LittleEndian, uint32(len([]byte(m.Source))))
	buf.Write([]byte(m.Source))

	return
}

func (m *String) Deserialize(buf *bytes.Reader) (err error) {
	// Header
	if err = m.Header.Deserialize(buf); err != nil {
		return err
	}

	// TimeRef
	if err = binary.Read(buf, binary.LittleEndian, &m.TimeRef.Sec); err != nil {
		return err
	}
	if err = binary.Read(buf, binary.LittleEndian, &m.TimeRef.NSec); err != nil {
		return err
	}

	// Source
	var size uint32
	if err = binary.Read(buf, binary.LittleEndian, &size); err != nil {
		return err
	}
	data := make([]byte, int(size))
	if err = binary.Read(buf, binary.LittleEndian, data); err != nil {
		return err
	}
	m.Source = string(data)

	return
}
