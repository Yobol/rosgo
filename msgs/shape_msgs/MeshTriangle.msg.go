// Code generated by ros-gen-go.
// source: MeshTriangle.msg
// DO NOT EDIT!
package shape_msgs

import (
	"io"
	"encoding/binary"
	"fmt"

	"github.com/ppg/rosgo/ros"
)

type _MsgMeshTriangle struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgMeshTriangle) Text() string {
	return t.text
}

func (t *_MsgMeshTriangle) Name() string {
	return t.name
}

func (t *_MsgMeshTriangle) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgMeshTriangle) NewMessage() ros.Message {
	m := new(MeshTriangle)

	return m
}

var (
	MsgMeshTriangle = &_MsgMeshTriangle{
		`# Definition of a triangle's vertices
uint32[3] vertex_indices
`,
		"shape_msgs/MeshTriangle",
		"9f61477ed8ee061cb6d71555c375ad8f",
	}
)

type MeshTriangle struct {
	VertexIndices [3]uint32
}

func (m *MeshTriangle) Type() ros.MessageType {
	return MsgMeshTriangle
}

func (m *MeshTriangle) Serialize(w io.Writer) (err error) {
	// Write size little endian
	err = binary.Write(w, binary.LittleEndian, uint32(len(m.VertexIndices)))
	if err != nil {
		return fmt.Errorf("could not write array length: %s", err)
	}
	for _, elem := range m.VertexIndices {
		if err = ros.SerializeMessageField(w, "uint32", &elem); err != nil {
			return err
		}
	}

	return
}

func (m *MeshTriangle) Deserialize(r io.Reader) (err error) {
	// VertexIndices
	// Read size little endian
	var size uint32
	if err = binary.Read(r, binary.LittleEndian, &size); err != nil {
		return fmt.Errorf("cannot read array size for VertexIndices: %s", err)
	}
	if size > 3 {
		return fmt.Errorf("array size for VertexIndices too large: expected=3, got=%d", size)
	}
	for i := 0; i < int(size); i++ {
		if err = ros.DeserializeMessageField(r, "uint32", &m.VertexIndices[i]); err != nil {
			return err
		}
	}

	return
}
