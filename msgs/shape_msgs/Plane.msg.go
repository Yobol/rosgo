// Code generated by ros-gen-go.
// source: /opt/ros/jade/share/ros/../shape_msgs/msg//Plane.msg
// DO NOT EDIT!
package shape_msgs

type _MsgPlane struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgPlane) Text() string {
	return t.text
}

func (t *_MsgPlane) Name() string {
	return t.name
}

func (t *_MsgPlane) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgPlane) NewMessage() ros.Message {
	m := new(Plane)

	return m
}

var (
	MsgPlane = &_MsgPlane{
		`# Representation of a plane, using the plane equation ax + by + cz + d = 0

# a := coef[0]
# b := coef[1]
# c := coef[2]
# d := coef[3]

float64[4] coef
`,
		"shape_msgs/Plane",
		"fc4d6d85ce294ff40862d9c7e9556367",
	}
)

type Plane struct {
	Coef [4]float64
}

func (m *Plane) Type() ros.MessageType {
	return MsgPlane
}

func (m *Plane) Serialize(buf *bytes.Buffer) (err error) {
	// Coef
	binary.Write(buf, binary.LittleEndian, uint32(len(m.Coef)))
	for _, e := range m.Coef {
		binary.Write(buf, binary.LittleEndian, e)
	}

	return
}

func (m *String) Deserialize(buf *bytes.Reader) (err error) {
	// Coef
	var size uint32
	if err = binary.Read(buf, binary.LittleEndian, &size); err != nil {
		return err
	}
	if size > 4 {
		return fmt.Errorf("array size for Coef too large: expected=4, got=%d", size)
	}
	for i := 0; i < int(size); i++ {
		if err = binary.Read(buf, binary.LittleEndian, &m.Coef[i]); err != nil {
			return err
		}
	}

	return
}
