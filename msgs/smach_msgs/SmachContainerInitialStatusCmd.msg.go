// Code generated by ros-gen-go.
// source: /opt/ros/jade/share/ros/../smach_msgs/msg//SmachContainerInitialStatusCmd.msg
// DO NOT EDIT!
package smach_msgs

type _MsgSmachContainerInitialStatusCmd struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgSmachContainerInitialStatusCmd) Text() string {
	return t.text
}

func (t *_MsgSmachContainerInitialStatusCmd) Name() string {
	return t.name
}

func (t *_MsgSmachContainerInitialStatusCmd) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgSmachContainerInitialStatusCmd) NewMessage() ros.Message {
	m := new(SmachContainerInitialStatusCmd)

	return m
}

var (
	MsgSmachContainerInitialStatusCmd = &_MsgSmachContainerInitialStatusCmd{
		`# The path to the node in the server
string path

# The desired initial state(s)
string[] initial_states

# Initial values for the local user data of the state machine
# A pickled user data structure
# i.e. the UserData's internal dictionary
string local_data
`,
		"smach_msgs/SmachContainerInitialStatusCmd",
		"adc36b24724296122a9b20a95c24b1a4",
	}
)

type SmachContainerInitialStatusCmd struct {
	Path          string
	InitialStates []string
	LocalData     string
}

func (m *SmachContainerInitialStatusCmd) Type() ros.MessageType {
	return MsgSmachContainerInitialStatusCmd
}

func (m *SmachContainerInitialStatusCmd) Serialize(buf *bytes.Buffer) (err error) {
	// Path
	binary.Write(buf, binary.LittleEndian, uint32(len([]byte(m.Path))))
	buf.Write([]byte(m.Path))

	// InitialStates
	binary.Write(buf, binary.LittleEndian, uint32(len(m.InitialStates)))
	for _, e := range m.InitialStates {
		binary.Write(buf, binary.LittleEndian, uint32(len([]byte(e))))
		buf.Write([]byte(e))
	}

	// LocalData
	binary.Write(buf, binary.LittleEndian, uint32(len([]byte(m.LocalData))))
	buf.Write([]byte(m.LocalData))

	return
}

func (m *String) Deserialize(buf *bytes.Reader) (err error) {
	// Path
	var size uint32
	if err = binary.Read(buf, binary.LittleEndian, &size); err != nil {
		return err
	}
	data := make([]byte, int(size))
	if err = binary.Read(buf, binary.LittleEndian, data); err != nil {
		return err
	}
	m.Path = string(data)

	// InitialStates
	var size uint32
	if err = binary.Read(buf, binary.LittleEndian, &size); err != nil {
		return err
	}
	m.InitialStates = make([]string, int(size))
	for i := 0; i < int(size); i++ {
		var size uint32
		if err = binary.Read(buf, binary.LittleEndian, &size); err != nil {
			return err
		}
		data := make([]byte, int(size))
		if err = binary.Read(buf, binary.LittleEndian, data); err != nil {
			return err
		}
		m.InitialStates[i] = string(data)
	}

	// LocalData
	var size uint32
	if err = binary.Read(buf, binary.LittleEndian, &size); err != nil {
		return err
	}
	data := make([]byte, int(size))
	if err = binary.Read(buf, binary.LittleEndian, data); err != nil {
		return err
	}
	m.LocalData = string(data)

	return
}
