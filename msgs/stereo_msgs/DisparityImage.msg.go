// Code generated by ros-gen-go.
// source: /opt/ros/jade/share/ros/../stereo_msgs/msg//DisparityImage.msg
// DO NOT EDIT!
package stereo_msgs

type _MsgDisparityImage struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgDisparityImage) Text() string {
	return t.text
}

func (t *_MsgDisparityImage) Name() string {
	return t.name
}

func (t *_MsgDisparityImage) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgDisparityImage) NewMessage() ros.Message {
	m := new(DisparityImage)

	return m
}

var (
	MsgDisparityImage = &_MsgDisparityImage{
		`# Separate header for compatibility with current TimeSynchronizer.
# Likely to be removed in a later release, use image.header instead.
Header header

# Floating point disparity image. The disparities are pre-adjusted for any
# x-offset between the principal points of the two cameras (in the case
# that they are verged). That is: d = x_l - x_r - (cx_l - cx_r)
sensor_msgs/Image image

# Stereo geometry. For disparity d, the depth from the camera is Z = fT/d.
float32 f # Focal length, pixels
float32 T # Baseline, world units

# Subwindow of (potentially) valid disparity values.
sensor_msgs/RegionOfInterest valid_window

# The range of disparities searched.
# In the disparity image, any disparity less than min_disparity is invalid.
# The disparity search range defines the horopter, or 3D volume that the
# stereo algorithm can "see". Points with Z outside of:
#     Z_min = fT / max_disparity
#     Z_max = fT / min_disparity
# could not be found.
float32 min_disparity
float32 max_disparity

# Smallest allowed disparity increment. The smallest achievable depth range
# resolution is delta_Z = (Z^2/fT)*delta_d.
float32 delta_d
`,
		"stereo_msgs/DisparityImage",
		"f33f64a97fa1bd153e562d657e8ee86c",
	}
)

type DisparityImage struct {
	Header       Header
	Image        sensor_msgs.Image
	F            float32
	T            float32
	ValidWindow  sensor_msgs.RegionOfInterest
	MinDisparity float32
	MaxDisparity float32
	DeltaD       float32
}

func (m *DisparityImage) Type() ros.MessageType {
	return MsgDisparityImage
}

func (m *DisparityImage) Serialize(buf *bytes.Buffer) (err error) {
	// Header
	if err = m.Header.Serialize(buf); err != nil {
		return err
	}

	// Image
	if err = m.Image.Serialize(buf); err != nil {
		return err
	}

	// F
	binary.Write(buf, binary.LittleEndian, m.F)

	// T
	binary.Write(buf, binary.LittleEndian, m.T)

	// ValidWindow
	if err = m.ValidWindow.Serialize(buf); err != nil {
		return err
	}

	// MinDisparity
	binary.Write(buf, binary.LittleEndian, m.MinDisparity)

	// MaxDisparity
	binary.Write(buf, binary.LittleEndian, m.MaxDisparity)

	// DeltaD
	binary.Write(buf, binary.LittleEndian, m.DeltaD)

	return
}

func (m *String) Deserialize(buf *bytes.Reader) (err error) {
	// Header
	if err = m.Header.Deserialize(buf); err != nil {
		return err
	}

	// Image
	if err = m.Image.Deserialize(buf); err != nil {
		return err
	}

	// F
	if err = binary.Read(buf, binary.LittleEndian, &m.F); err != nil {
		return err
	}

	// T
	if err = binary.Read(buf, binary.LittleEndian, &m.T); err != nil {
		return err
	}

	// ValidWindow
	if err = m.ValidWindow.Deserialize(buf); err != nil {
		return err
	}

	// MinDisparity
	if err = binary.Read(buf, binary.LittleEndian, &m.MinDisparity); err != nil {
		return err
	}

	// MaxDisparity
	if err = binary.Read(buf, binary.LittleEndian, &m.MaxDisparity); err != nil {
		return err
	}

	// DeltaD
	if err = binary.Read(buf, binary.LittleEndian, &m.DeltaD); err != nil {
		return err
	}

	return
}
