// Code generated by ros-gen-go.
// source: /opt/ros/jade/share/ros/../trajectory_msgs/msg//MultiDOFJointTrajectory.msg
// DO NOT EDIT!
package trajectory_msgs

type _MsgMultiDOFJointTrajectory struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgMultiDOFJointTrajectory) Text() string {
	return t.text
}

func (t *_MsgMultiDOFJointTrajectory) Name() string {
	return t.name
}

func (t *_MsgMultiDOFJointTrajectory) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgMultiDOFJointTrajectory) NewMessage() ros.Message {
	m := new(MultiDOFJointTrajectory)

	return m
}

var (
	MsgMultiDOFJointTrajectory = &_MsgMultiDOFJointTrajectory{
		`# The header is used to specify the coordinate frame and the reference time for the trajectory durations
Header header

# A representation of a multi-dof joint trajectory (each point is a transformation)
# Each point along the trajectory will include an array of positions/velocities/accelerations
# that has the same length as the array of joint names, and has the same order of joints as 
# the joint names array.

string[] joint_names
MultiDOFJointTrajectoryPoint[] points
`,
		"trajectory_msgs/MultiDOFJointTrajectory",
		"e19d4216caa321543b869ca5b1f5e224",
	}
)

type MultiDOFJointTrajectory struct {
	Header     Header
	JointNames []string
	Points     []MultiDOFJointTrajectoryPoint
}

func (m *MultiDOFJointTrajectory) Type() ros.MessageType {
	return MsgMultiDOFJointTrajectory
}

func (m *MultiDOFJointTrajectory) Serialize(buf *bytes.Buffer) (err error) {
	// Header
	if err = m.Header.Serialize(buf); err != nil {
		return err
	}

	// JointNames
	binary.Write(buf, binary.LittleEndian, uint32(len(m.JointNames)))
	for _, e := range m.JointNames {
		binary.Write(buf, binary.LittleEndian, uint32(len([]byte(e))))
		buf.Write([]byte(e))
	}

	// Points
	binary.Write(buf, binary.LittleEndian, uint32(len(m.Points)))
	for _, e := range m.Points {
		if err = e.Serialize(buf); err != nil {
			return err
		}
	}

	return
}

func (m *String) Deserialize(buf *bytes.Reader) (err error) {
	// Header
	if err = m.Header.Deserialize(buf); err != nil {
		return err
	}

	// JointNames
	var size uint32
	if err = binary.Read(buf, binary.LittleEndian, &size); err != nil {
		return err
	}
	m.JointNames = make([]string, int(size))
	for i := 0; i < int(size); i++ {
		var size uint32
		if err = binary.Read(buf, binary.LittleEndian, &size); err != nil {
			return err
		}
		data := make([]byte, int(size))
		if err = binary.Read(buf, binary.LittleEndian, data); err != nil {
			return err
		}
		m.JointNames[i] = string(data)
	}

	// Points
	var size uint32
	if err = binary.Read(buf, binary.LittleEndian, &size); err != nil {
		return err
	}
	m.Points = make([]MultiDOFJointTrajectoryPoint, int(size))
	for i := 0; i < int(size); i++ {
		if err = m.Points[i].Deserialize(buf); err != nil {
			return err
		}
	}

	return
}
