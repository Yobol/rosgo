// Code generated by ros-gen-go.
// source: /opt/ros/jade/share/ros/../trajectory_msgs/msg//MultiDOFJointTrajectoryPoint.msg
// DO NOT EDIT!
package trajectory_msgs

type _MsgMultiDOFJointTrajectoryPoint struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgMultiDOFJointTrajectoryPoint) Text() string {
	return t.text
}

func (t *_MsgMultiDOFJointTrajectoryPoint) Name() string {
	return t.name
}

func (t *_MsgMultiDOFJointTrajectoryPoint) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgMultiDOFJointTrajectoryPoint) NewMessage() ros.Message {
	m := new(MultiDOFJointTrajectoryPoint)

	return m
}

var (
	MsgMultiDOFJointTrajectoryPoint = &_MsgMultiDOFJointTrajectoryPoint{
		`# Each multi-dof joint can specify a transform (up to 6 DOF)
geometry_msgs/Transform[] transforms

# There can be a velocity specified for the origin of the joint 
geometry_msgs/Twist[] velocities

# There can be an acceleration specified for the origin of the joint 
geometry_msgs/Twist[] accelerations

duration time_from_start
`,
		"trajectory_msgs/MultiDOFJointTrajectoryPoint",
		"5f4362816258cb631113d0b515ba1c14",
	}
)

type MultiDOFJointTrajectoryPoint struct {
	Transforms    []geometry_msgs.Transform
	Velocities    []geometry_msgs.Twist
	Accelerations []geometry_msgs.Twist
	TimeFromStart ros.Duration
}

func (m *MultiDOFJointTrajectoryPoint) Type() ros.MessageType {
	return MsgMultiDOFJointTrajectoryPoint
}

func (m *MultiDOFJointTrajectoryPoint) Serialize(buf *bytes.Buffer) (err error) {
	// Transforms
	binary.Write(buf, binary.LittleEndian, uint32(len(m.Transforms)))
	for _, e := range m.Transforms {
		if err = e.Serialize(buf); err != nil {
			return err
		}
	}

	// Velocities
	binary.Write(buf, binary.LittleEndian, uint32(len(m.Velocities)))
	for _, e := range m.Velocities {
		if err = e.Serialize(buf); err != nil {
			return err
		}
	}

	// Accelerations
	binary.Write(buf, binary.LittleEndian, uint32(len(m.Accelerations)))
	for _, e := range m.Accelerations {
		if err = e.Serialize(buf); err != nil {
			return err
		}
	}

	// TimeFromStart
	binary.Write(buf, binary.LittleEndian, m.TimeFromStart.Sec)
	binary.Write(buf, binary.LittleEndian, m.TimeFromStart.NSec)

	return
}

func (m *String) Deserialize(buf *bytes.Reader) (err error) {
	// Transforms
	var size uint32
	if err = binary.Read(buf, binary.LittleEndian, &size); err != nil {
		return err
	}
	m.Transforms = make([]geometry_msgs.Transform, int(size))
	for i := 0; i < int(size); i++ {
		if err = m.Transforms[i].Deserialize(buf); err != nil {
			return err
		}
	}

	// Velocities
	var size uint32
	if err = binary.Read(buf, binary.LittleEndian, &size); err != nil {
		return err
	}
	m.Velocities = make([]geometry_msgs.Twist, int(size))
	for i := 0; i < int(size); i++ {
		if err = m.Velocities[i].Deserialize(buf); err != nil {
			return err
		}
	}

	// Accelerations
	var size uint32
	if err = binary.Read(buf, binary.LittleEndian, &size); err != nil {
		return err
	}
	m.Accelerations = make([]geometry_msgs.Twist, int(size))
	for i := 0; i < int(size); i++ {
		if err = m.Accelerations[i].Deserialize(buf); err != nil {
			return err
		}
	}

	// TimeFromStart
	if err = binary.Read(buf, binary.LittleEndian, &m.TimeFromStart.Sec); err != nil {
		return err
	}
	if err = binary.Read(buf, binary.LittleEndian, &m.TimeFromStart.NSec); err != nil {
		return err
	}

	return
}
