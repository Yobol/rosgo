// Code generated by ros-gen-go.
// source: /opt/ros/jade/share/ros/../visualization_msgs/msg//InteractiveMarker.msg
// DO NOT EDIT!
package visualization_msgs

type _MsgInteractiveMarker struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgInteractiveMarker) Text() string {
	return t.text
}

func (t *_MsgInteractiveMarker) Name() string {
	return t.name
}

func (t *_MsgInteractiveMarker) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgInteractiveMarker) NewMessage() ros.Message {
	m := new(InteractiveMarker)

	return m
}

var (
	MsgInteractiveMarker = &_MsgInteractiveMarker{
		`# Time/frame info.
# If header.time is set to 0, the marker will be retransformed into
# its frame on each timestep. You will receive the pose feedback
# in the same frame.
# Otherwise, you might receive feedback in a different frame.
# For rviz, this will be the current 'fixed frame' set by the user.
Header header

# Initial pose. Also, defines the pivot point for rotations.
geometry_msgs/Pose pose

# Identifying string. Must be globally unique in
# the topic that this message is sent through.
string name

# Short description (< 40 characters).
string description

# Scale to be used for default controls (default=1).
float32 scale

# All menu and submenu entries associated with this marker.
MenuEntry[] menu_entries

# List of controls displayed for this marker.
InteractiveMarkerControl[] controls
`,
		"visualization_msgs/InteractiveMarker",
		"35474b6ee24280992e112232b62b4215",
	}
)

type InteractiveMarker struct {
	Header      Header
	Pose        geometry_msgs.Pose
	Name        string
	Description string
	Scale       float32
	MenuEntries []MenuEntry
	Controls    []InteractiveMarkerControl
}

func (m *InteractiveMarker) Type() ros.MessageType {
	return MsgInteractiveMarker
}

func (m *InteractiveMarker) Serialize(buf *bytes.Buffer) (err error) {
	// Header
	if err = m.Header.Serialize(buf); err != nil {
		return err
	}

	// Pose
	if err = m.Pose.Serialize(buf); err != nil {
		return err
	}

	// Name
	binary.Write(buf, binary.LittleEndian, uint32(len([]byte(m.Name))))
	buf.Write([]byte(m.Name))

	// Description
	binary.Write(buf, binary.LittleEndian, uint32(len([]byte(m.Description))))
	buf.Write([]byte(m.Description))

	// Scale
	binary.Write(buf, binary.LittleEndian, m.Scale)

	// MenuEntries
	binary.Write(buf, binary.LittleEndian, uint32(len(m.MenuEntries)))
	for _, e := range m.MenuEntries {
		if err = e.Serialize(buf); err != nil {
			return err
		}
	}

	// Controls
	binary.Write(buf, binary.LittleEndian, uint32(len(m.Controls)))
	for _, e := range m.Controls {
		if err = e.Serialize(buf); err != nil {
			return err
		}
	}

	return
}

func (m *String) Deserialize(buf *bytes.Reader) (err error) {
	// Header
	if err = m.Header.Deserialize(buf); err != nil {
		return err
	}

	// Pose
	if err = m.Pose.Deserialize(buf); err != nil {
		return err
	}

	// Name
	var size uint32
	if err = binary.Read(buf, binary.LittleEndian, &size); err != nil {
		return err
	}
	data := make([]byte, int(size))
	if err = binary.Read(buf, binary.LittleEndian, data); err != nil {
		return err
	}
	m.Name = string(data)

	// Description
	var size uint32
	if err = binary.Read(buf, binary.LittleEndian, &size); err != nil {
		return err
	}
	data := make([]byte, int(size))
	if err = binary.Read(buf, binary.LittleEndian, data); err != nil {
		return err
	}
	m.Description = string(data)

	// Scale
	if err = binary.Read(buf, binary.LittleEndian, &m.Scale); err != nil {
		return err
	}

	// MenuEntries
	var size uint32
	if err = binary.Read(buf, binary.LittleEndian, &size); err != nil {
		return err
	}
	m.MenuEntries = make([]MenuEntry, int(size))
	for i := 0; i < int(size); i++ {
		if err = m.MenuEntries[i].Deserialize(buf); err != nil {
			return err
		}
	}

	// Controls
	var size uint32
	if err = binary.Read(buf, binary.LittleEndian, &size); err != nil {
		return err
	}
	m.Controls = make([]InteractiveMarkerControl, int(size))
	for i := 0; i < int(size); i++ {
		if err = m.Controls[i].Deserialize(buf); err != nil {
			return err
		}
	}

	return
}
