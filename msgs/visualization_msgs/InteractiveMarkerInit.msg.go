// Code generated by ros-gen-go.
// source: /opt/ros/jade/share/ros/../visualization_msgs/msg//InteractiveMarkerInit.msg
// DO NOT EDIT!
package visualization_msgs

type _MsgInteractiveMarkerInit struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgInteractiveMarkerInit) Text() string {
	return t.text
}

func (t *_MsgInteractiveMarkerInit) Name() string {
	return t.name
}

func (t *_MsgInteractiveMarkerInit) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgInteractiveMarkerInit) NewMessage() ros.Message {
	m := new(InteractiveMarkerInit)

	return m
}

var (
	MsgInteractiveMarkerInit = &_MsgInteractiveMarkerInit{
		`# Identifying string. Must be unique in the topic namespace
# that this server works on.
string server_id

# Sequence number.
# The client will use this to detect if it has missed a subsequent
# update.  Every update message will have the same sequence number as
# an init message.  Clients will likely want to unsubscribe from the
# init topic after a successful initialization to avoid receiving
# duplicate data.
uint64 seq_num

# All markers.
InteractiveMarker[] markers
`,
		"visualization_msgs/InteractiveMarkerInit",
		"6fe25ae7424b594bde75cf947cb3c00e",
	}
)

type InteractiveMarkerInit struct {
	ServerID string
	SeqNum   uint64
	Markers  []InteractiveMarker
}

func (m *InteractiveMarkerInit) Type() ros.MessageType {
	return MsgInteractiveMarkerInit
}

func (m *InteractiveMarkerInit) Serialize(buf *bytes.Buffer) (err error) {
	// ServerID
	binary.Write(buf, binary.LittleEndian, uint32(len([]byte(m.ServerID))))
	buf.Write([]byte(m.ServerID))

	// SeqNum
	binary.Write(buf, binary.LittleEndian, m.SeqNum)

	// Markers
	binary.Write(buf, binary.LittleEndian, uint32(len(m.Markers)))
	for _, e := range m.Markers {
		if err = e.Serialize(buf); err != nil {
			return err
		}
	}

	return
}

func (m *String) Deserialize(buf *bytes.Reader) (err error) {
	// ServerID
	var size uint32
	if err = binary.Read(buf, binary.LittleEndian, &size); err != nil {
		return err
	}
	data := make([]byte, int(size))
	if err = binary.Read(buf, binary.LittleEndian, data); err != nil {
		return err
	}
	m.ServerID = string(data)

	// SeqNum
	if err = binary.Read(buf, binary.LittleEndian, &m.SeqNum); err != nil {
		return err
	}

	// Markers
	var size uint32
	if err = binary.Read(buf, binary.LittleEndian, &size); err != nil {
		return err
	}
	m.Markers = make([]InteractiveMarker, int(size))
	for i := 0; i < int(size); i++ {
		if err = m.Markers[i].Deserialize(buf); err != nil {
			return err
		}
	}

	return
}
