// Code generated by ros-gen-go.
// source: /opt/ros/jade/share/ros/../visualization_msgs/msg//InteractiveMarkerUpdate.msg
// DO NOT EDIT!
package visualization_msgs

type _MsgInteractiveMarkerUpdate struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgInteractiveMarkerUpdate) Text() string {
	return t.text
}

func (t *_MsgInteractiveMarkerUpdate) Name() string {
	return t.name
}

func (t *_MsgInteractiveMarkerUpdate) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgInteractiveMarkerUpdate) NewMessage() ros.Message {
	m := new(InteractiveMarkerUpdate)

	return m
}

var (
	MsgInteractiveMarkerUpdate = &_MsgInteractiveMarkerUpdate{
		`# Identifying string. Must be unique in the topic namespace
# that this server works on.
string server_id

# Sequence number.
# The client will use this to detect if it has missed an update.
uint64 seq_num

# Type holds the purpose of this message.  It must be one of UPDATE or KEEP_ALIVE.
# UPDATE: Incremental update to previous state. 
#         The sequence number must be 1 higher than for
#         the previous update.
# KEEP_ALIVE: Indicates the that the server is still living.
#             The sequence number does not increase.
#             No payload data should be filled out (markers, poses, or erases).
uint8 KEEP_ALIVE = 0
uint8 UPDATE = 1

uint8 type

#Note: No guarantees on the order of processing.
#      Contents must be kept consistent by sender.

#Markers to be added or updated
InteractiveMarker[] markers

#Poses of markers that should be moved
InteractiveMarkerPose[] poses

#Names of markers to be erased
string[] erases
`,
		"visualization_msgs/InteractiveMarkerUpdate",
		"78e02717d45a794bd09a18d1e530a0fe",
	}
)

type InteractiveMarkerUpdate struct {
	ServerID string
	SeqNum   uint64
	Type     uint8
	Markers  []InteractiveMarker
	Poses    []InteractiveMarkerPose
	Erases   []string
}

func (m *InteractiveMarkerUpdate) Type() ros.MessageType {
	return MsgInteractiveMarkerUpdate
}

func (m *InteractiveMarkerUpdate) Serialize(buf *bytes.Buffer) (err error) {
	// ServerID
	binary.Write(buf, binary.LittleEndian, uint32(len([]byte(m.ServerID))))
	buf.Write([]byte(m.ServerID))

	// SeqNum
	binary.Write(buf, binary.LittleEndian, m.SeqNum)

	// Type
	binary.Write(buf, binary.LittleEndian, m.Type)

	// Markers
	binary.Write(buf, binary.LittleEndian, uint32(len(m.Markers)))
	for _, e := range m.Markers {
		if err = e.Serialize(buf); err != nil {
			return err
		}
	}

	// Poses
	binary.Write(buf, binary.LittleEndian, uint32(len(m.Poses)))
	for _, e := range m.Poses {
		if err = e.Serialize(buf); err != nil {
			return err
		}
	}

	// Erases
	binary.Write(buf, binary.LittleEndian, uint32(len(m.Erases)))
	for _, e := range m.Erases {
		binary.Write(buf, binary.LittleEndian, uint32(len([]byte(e))))
		buf.Write([]byte(e))
	}

	return
}

func (m *String) Deserialize(buf *bytes.Reader) (err error) {
	// ServerID
	var size uint32
	if err = binary.Read(buf, binary.LittleEndian, &size); err != nil {
		return err
	}
	data := make([]byte, int(size))
	if err = binary.Read(buf, binary.LittleEndian, data); err != nil {
		return err
	}
	m.ServerID = string(data)

	// SeqNum
	if err = binary.Read(buf, binary.LittleEndian, &m.SeqNum); err != nil {
		return err
	}

	// Type
	if err = binary.Read(buf, binary.LittleEndian, &m.Type); err != nil {
		return err
	}

	// Markers
	var size uint32
	if err = binary.Read(buf, binary.LittleEndian, &size); err != nil {
		return err
	}
	m.Markers = make([]InteractiveMarker, int(size))
	for i := 0; i < int(size); i++ {
		if err = m.Markers[i].Deserialize(buf); err != nil {
			return err
		}
	}

	// Poses
	var size uint32
	if err = binary.Read(buf, binary.LittleEndian, &size); err != nil {
		return err
	}
	m.Poses = make([]InteractiveMarkerPose, int(size))
	for i := 0; i < int(size); i++ {
		if err = m.Poses[i].Deserialize(buf); err != nil {
			return err
		}
	}

	// Erases
	var size uint32
	if err = binary.Read(buf, binary.LittleEndian, &size); err != nil {
		return err
	}
	m.Erases = make([]string, int(size))
	for i := 0; i < int(size); i++ {
		var size uint32
		if err = binary.Read(buf, binary.LittleEndian, &size); err != nil {
			return err
		}
		data := make([]byte, int(size))
		if err = binary.Read(buf, binary.LittleEndian, data); err != nil {
			return err
		}
		m.Erases[i] = string(data)
	}

	return
}
