{{/*
$ cat /opt/ros/jade//share/std_msgs/msg/String.msg
string data
*/}}

// Code generated by ros-gen-go.
// source: {{ .InFile }}
// DO NOT EDIT!
package {{ .PackageName }}

type _Msg{{ .Name }} struct {
	text string
	name string
	md5sum string
}

func (t *_Msg{{ .Name }}) Text() string {
	return t.text
}

func (t *_Msg{{ .Name }}) Name() string {
	return t.name
}

func (t *_Msg{{ .Name }}) MD5Sum() string {
	return t.md5sum
}

func (t *_Msg{{ .Name }}) NewMessage() ros.Message {
	m := new({{ .Name }})
	{{- range .Fields }}
	m.{{ .Name }} = {{ .GoZeroValue }}
	{{- end }}
	return m
}

var (
	Msg{{ .Name }} = &_Msg{{ .Name }} {
		`{{ .Raw }}`,
		"{{ .PackageName }}/{{ .Name }}",
		"{{ .MD5Sum }}",
	}
)

type {{ .Name }} struct {
	{{- range .Fields }}
	{{ .Name }} {{ .GoTypeName }}
	{{- end }}
}

func (m *{{ .Name }}) Type() ros.MessageType {
	return Msg{{ .Name }}
}

func (m *{{ .Name }}) Serialize(buf *bytes.Buffer) (err error) {
	{{- range .Fields }}
	{{- if .BuiltIn }}
	{{- if eq .TypeName "string" }}
	binary.Write(buf, binary.LittleEndian, uint32(len([]byte(m.{{ .Name }}))))
	buf.Write([]byte(m.{{ .Name }}))

	{{- else if eq .TypeName "time" "duration" }}
	binary.Write(buf, binary.LittleEndian, m.{{ .Name }}.Sec)
	binary.Write(buf, binary.LittleEndian, m.{{ .Name }}.NSec)

	{{- else }}
	binary.Write(buf, binary.LittleEndian, m.{{ .Name }})

	{{- end }}
	{{- else }}
	if err = m.{{ .Name }}.Serialize(buf); err != nil {
		return err
	}
	{{- end }}
	{{- end }}
	return
}


func (m *String) Deserialize(buf *bytes.Reader) (err error) {
	{{- range .Fields }}
	{{- if .BuiltIn }}
	{{- if eq .TypeName "string" }}
	var size uint32
	if err = binary.Read(buf, binary.LittleEndian, &size); err != nil {
		return err
	}
	data := make([]byte, int(size))
	if err = binary.Read(buf, binary.LittleEndian, data); err != nil {
		return err
	}
	m.{{ .Name }} = string(data)

	{{- else if eq .TypeName "time" "duration" }}
	if err = binary.Read(buf, binary.LittleEndian, &m.{{ .Name }}.Sec); err != nil {
		return err
	}
	if err = binary.Read(buf, binary.LittleEndian, &m.{{ .Name }}.NSec); err != nil {
		return err
	}

	{{- else }}
	if err = binary.Read(buf, binary.LittleEndian, &m.{{ .Name }}); err != nil {
		return err
	}

	{{- end }}
	{{- else }}
	if err = m.{{ .Name }}.Deserialize(buf); err != nil {
		return err
	}
	{{- end }}
	{{- end }}
	return
}
