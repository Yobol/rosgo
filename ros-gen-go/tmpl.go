// Code generated by go-bindata.
// sources:
// msg.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _msgTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x56\xdf\x6f\xdb\x36\x10\x7e\xb6\xfe\x8a\xab\x80\x16\x92\xeb\xc8\xc5\x86\xbe\xa4\xcb\x80\x6d\x49\x87\x00\x8d\x3b\x34\xc6\xf6\x10\x04\x2d\x63\x9d\x1c\xa2\x12\xe5\x91\x54\x53\xc7\xc8\xff\xbe\x3b\x4a\x96\x25\xd9\x4e\x6c\x2f\x68\x80\x20\x22\x79\xf7\xdd\xc7\xfb\xf1\x85\xc3\x21\xfc\x91\xc7\x08\x53\x54\xa8\x85\xc5\x18\x6e\xe6\xa0\x73\x73\x44\x1b\x47\xd3\x3c\xf2\xc8\xc0\xe4\x85\x9e\xe0\x31\x2c\x16\x10\x9d\xab\xf7\x32\x45\x78\x78\xe0\x83\xd3\x8f\x30\xfa\x38\x86\xb3\xd3\xf3\xf1\x0b\x6f\x26\x26\x5f\xc5\x14\x9d\xd5\x5f\xe5\xf7\x48\x64\xce\xd4\xb3\xf3\x19\xc2\xe7\x0b\x33\xe5\xc3\x6a\x17\x8c\xd5\xc5\xc4\xc2\xc2\xeb\x59\xfc\x6e\x79\x29\xd5\xd4\xeb\x29\x3e\x5e\x2e\xb2\xf8\xad\x29\xb2\xe5\x92\x90\x92\x42\x4d\x20\xb0\xd0\xef\xa0\x85\x30\x26\x90\x20\xac\x4c\x19\x55\xa3\x2d\xb4\x02\x1b\x31\xfc\xe3\xbe\xfc\xb1\xd9\x97\xd9\x3c\xee\x7b\x71\xfa\xf6\xb2\xc8\x36\x7b\x97\xf4\x9f\x88\x8d\x77\x17\x68\x0c\xa5\x8b\x30\x28\xf3\x51\xb5\x62\xa0\x0c\x8e\x4f\x40\xe1\x5d\xd0\xf4\xf0\x7a\x8b\xc5\xb0\xcf\x99\x3f\x3b\x86\x51\x4e\xe7\x54\x35\x9b\x83\x54\xd2\x4a\x91\xca\x7b\x84\x44\x62\x1a\x1b\x10\x06\xec\x2d\xce\x41\x68\x04\x91\xa6\x70\x8f\x3a\x87\x6f\x22\x2d\x70\x00\x77\xb7\x72\x72\x0b\xd2\x40\x8c\x89\x28\x52\x4b\xee\x30\xcd\xa1\x3f\xa4\x7a\x2d\x2f\xe0\x98\x7f\x13\x1a\x02\xaf\xd7\x29\xde\x09\xbc\xea\xd6\x93\xf8\xf6\xbe\xf0\xc6\x27\x71\x47\xeb\x2f\x03\x5a\xfb\xeb\xdd\x30\x6c\xf8\xf8\xb5\x4d\x99\xc5\x6a\xeb\xc1\x0b\xab\x9e\xd9\xdc\x2f\x8b\xc5\x11\x68\xa1\x28\x47\xd1\xfb\xf2\xa6\x4c\xba\xc5\x65\x01\x32\xa1\x6e\x35\xbf\x69\x2d\xe6\xb4\x73\x55\xee\x4c\x2d\x44\x6e\xeb\x92\xd3\xf4\x86\x0e\xd8\x6b\xb5\xe3\xd6\xa8\x62\xfa\xb8\xae\xbf\xd8\xe4\xcf\x7c\x4c\x7c\x96\x0d\xed\x18\x94\x87\xab\xe2\x66\xd0\x6f\x37\x24\x39\xb4\x4b\x3a\x76\x57\xaa\xd3\xdb\xce\x1f\x03\x31\x2c\xd5\x43\x2a\x04\xdf\xa0\x2e\xab\xe9\xd7\x11\xf9\x4a\xbf\x17\x32\xb5\xe7\xaa\xb9\x87\xff\x42\x54\xb3\xf3\xcb\x36\x2c\x9d\x6e\xa4\x12\x7a\x1e\xfd\xa3\xa5\xc5\xe0\xa6\x48\x06\x50\xed\x7c\x90\xd6\xa6\x78\xa6\x62\x29\xd4\x00\x0a\xa9\xec\xcf\x3f\x05\x29\xaa\xe0\xea\xfa\x66\x4e\xb6\xcc\xeb\x43\x9e\xcf\xfe\xa6\xe2\xd3\x5d\xe8\x87\xc0\x8a\xa4\x42\xda\x62\xe4\x55\x79\x49\x0d\xae\xd3\xb2\x32\xa3\x9b\xf8\x71\x41\x2a\x23\x73\xb5\x17\xbf\x76\xa0\xe8\x12\x27\xe1\xa1\xbe\x23\xe7\xdc\x20\x7a\x30\x8d\x1a\xa5\x6c\x83\x36\x22\x5f\x5f\x6b\x9a\x92\x35\xea\x55\x51\x39\x4c\xf8\xce\x19\xbd\xa0\x11\x97\xa9\x1b\x9f\xaa\x31\x68\x97\x87\xa0\x09\xdf\xf8\xdc\xd2\x6e\x2d\x68\xe8\x73\x85\x0c\x75\x4b\x92\xa0\x0e\x21\xe0\x40\xf4\x9b\xd3\xf7\xd6\x01\x22\x45\x6f\xf6\x63\xdd\x72\xab\x29\x3a\xa4\xa3\xb2\xa8\x49\x93\x1b\x29\xc9\x35\x7c\x1e\x00\xb2\xb8\x95\x2c\x5a\x36\x2e\x13\x1c\xdb\x62\x36\x4b\xe9\x7f\x52\x6b\x16\x0c\xda\x94\xf2\xc9\xaa\x14\x81\x5f\x0d\x47\x37\xfd\xbb\x79\x07\x33\x9a\x14\x9b\x80\x9f\x45\x2f\x8d\x5f\xc6\x0f\xbb\xe3\xdd\xab\x65\x60\x39\xb7\xdd\x41\x8d\xf1\x39\x46\x95\x29\x19\x96\xa0\x32\x75\x8d\x16\xaa\x12\xfc\x09\x45\xfc\x48\xc6\x5f\xb1\xf3\x93\x1d\x15\x0b\x2b\x38\xed\x99\xf8\xba\x1c\xe3\x01\x29\xbf\x0d\x9c\x77\xb8\x77\x54\xc6\xdb\xa1\x8d\x9b\x33\x40\xd8\xe5\xbd\x03\xe7\xbc\xbf\x68\xec\x9b\x98\x0d\xea\xf1\x14\xe3\xff\x19\x62\xb4\x43\x8c\x6d\x82\x71\x50\xc4\x1d\x83\xed\xa3\x54\xa7\xab\xae\x7e\x16\xad\xba\x74\x35\x0f\xa1\x83\xbb\x14\x2a\xbe\xef\xb3\x0a\xd5\x8f\x99\xa7\x2a\xf2\xfa\xb3\xc2\xc5\x73\xf1\x7f\x85\xee\x13\x83\x81\x00\x2a\xa4\x24\xb3\xd1\x19\xdf\x37\x09\x7c\xe1\xd8\x3b\x2f\xd6\xc8\xa6\x26\xda\x3c\x87\x54\xe8\x29\x3d\xc3\xf1\xfb\x0c\x27\xf4\x52\x3f\xe9\xe2\x0e\xe8\x01\x67\x4f\x5e\xc6\xfe\xc0\x61\x84\xeb\xba\xd8\xd6\xd9\x5a\x06\xd6\x1e\x38\x6d\x4d\x68\xf6\x0e\xf3\x92\xac\x20\x6f\xde\xd1\xdf\x5f\x56\x76\xb4\x7c\xfd\x7a\x83\x74\xb7\xd4\x71\xbb\xfc\x5e\xc9\xeb\x96\x02\x3f\xae\xe8\x3b\x82\xee\xa5\xe9\xff\x05\x00\x00\xff\xff\xc9\x53\x6c\xd7\x0a\x0d\x00\x00")

func msgTmplBytes() ([]byte, error) {
	return bindataRead(
		_msgTmpl,
		"msg.tmpl",
	)
}

func msgTmpl() (*asset, error) {
	bytes, err := msgTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "msg.tmpl", size: 3338, mode: os.FileMode(420), modTime: time.Unix(1470555787, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"msg.tmpl": msgTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"msg.tmpl": &bintree{msgTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

