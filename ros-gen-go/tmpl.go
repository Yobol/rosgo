// Code generated by go-bindata.
// sources:
// msg.partial.tmpl
// msg.tmpl
// srv.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _msgPartialTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x54\x51\x4f\xdb\x48\x10\x7e\xb6\x7f\xc5\x5c\x24\x90\x1d\x72\x0e\xba\x13\x2f\xe1\x72\x52\x25\x68\x55\xa9\xd0\x0a\x90\xfa\x80\x10\x6c\xe3\x49\xb2\xc2\x5e\xa3\xdd\x35\x21\x58\xf9\xef\x9d\xd9\x75\x4c\x1c\x92\x40\xdb\x48\x08\xcf\xec\xcc\x37\xdf\xec\x7c\xb3\x76\xfe\x80\x70\x7b\x66\x26\x55\x05\xc9\xb9\xc8\x11\x16\x0b\x30\x56\x97\x23\x0b\x55\x18\x58\x7c\xb2\x6c\x4a\x35\x09\x03\xc5\xc7\x4b\x23\x4f\x8f\x4c\x99\x2f\xcd\x45\x18\x8e\x4b\x35\x82\xc8\x42\x77\x0d\x2d\x86\x2b\x02\x89\xe2\x3a\x94\x51\x35\xda\x52\x2b\xb0\x09\xc3\xef\xce\xe5\x8f\xcd\xb9\xcc\x66\x77\xee\xd9\xc9\xd1\x65\x99\x6f\xce\xf6\xf4\xdf\xa8\x8d\xb3\x33\x34\x46\x4c\x98\x81\x2e\x4c\x52\x5b\x0c\x94\xc3\x60\x08\x0a\x67\xd1\x6a\x46\x18\x54\x55\xbf\x0b\xe7\x5f\xaf\x4e\x07\x70\x5e\xd0\x39\xa6\x60\x0b\x90\x4a\x5a\x29\x32\xf9\x8c\x30\x96\x98\xa5\x06\x84\x01\x3b\xc5\x39\x08\x8d\x20\xb2\x0c\x9e\x51\x17\xf0\x28\xb2\x12\x7b\x30\x9b\xca\xd1\x14\xa4\x81\x14\xc7\xa2\xcc\x2c\xa5\xc3\xa4\x80\x6e\x7f\xb1\x68\x1a\x70\xcc\x1f\x85\x86\x28\x0c\xd6\x86\x37\x84\xfd\xf5\x79\x12\xdf\xe0\x8e\x1d\x17\x62\x46\xf6\x5d\x8f\xec\x0e\xdb\xdf\xc4\xe8\x9e\x1a\xaa\xe3\xfa\x2b\x39\x9d\x26\xc6\xdf\x62\xed\x5a\x84\x71\x18\x3a\xcd\x6c\xd6\x4b\x55\xfd\x0d\x5a\x28\xba\xa3\xe4\xa3\xef\x94\x49\xb7\xb8\x54\x20\xc7\x90\x7c\x36\x1f\xb4\x16\x73\xf2\x5c\x7b\xcf\xc4\x42\xe2\x5c\x97\x7c\x4d\x87\x74\xc0\x59\x2f\x1e\x67\xa3\x4a\xe9\xe3\xa6\xf9\xe2\x90\x4f\xc5\x15\xf1\xa9\xe1\x3d\x03\x7f\xf8\x32\xdc\x1c\xba\xad\xc1\x5e\xa2\xf6\xe3\x88\x66\x20\x8b\xe4\xbb\x96\x16\x75\x0c\x11\x6a\x0d\xf4\x57\xd0\xf7\xb6\x5e\x00\xd8\xdd\xee\x20\x0c\xfa\x7d\x70\x20\x60\x98\x6a\x26\xad\xcd\x90\x59\x48\xa1\x28\x83\x61\x87\xf0\x43\x2a\xa1\xe7\xbe\x58\x34\xeb\x2d\xed\x2f\x2e\xf8\xd4\xc5\xf6\xa0\x94\xca\xfe\xfb\x4f\x94\xa1\x8a\xf2\x64\x95\x73\x4c\xe2\xa2\xaa\x0c\xf5\x17\x09\x4f\x66\x6e\xa8\xb5\x1a\xc6\xb9\x4d\x4e\x99\xf7\x38\xea\x8c\x8a\x32\x4b\x41\x15\x16\x66\x8e\x91\x70\x24\x09\x70\x62\xa7\x03\xd8\x33\x9d\x1e\x83\xc4\x3c\x4a\x80\x71\xa1\xe1\x96\x1c\x19\x3a\x3d\xfb\x6e\x5b\x85\xa9\x0c\xd0\xaf\x2e\x3d\x74\x6b\xd0\x5c\x5f\xbd\x0f\xee\x76\xb8\x25\xa7\x97\x95\x69\x50\xad\x7d\xc6\x8e\x8f\xdb\xc4\xc1\xfd\x6a\xf2\x74\xe2\x1c\x0b\x4f\xc9\xcd\x2f\x33\xe8\x2f\xfb\xf7\xeb\xb6\xaf\x6f\x03\x81\x56\xf9\xa6\xb2\x57\x4e\xd0\x28\x6c\xb9\x71\xdb\xc5\x74\x82\xa6\x91\x93\x66\x39\x5d\xa0\x48\xdf\x2b\x27\x56\xce\x0a\x9a\x8f\x5a\x53\x17\x38\xc2\x14\xc8\xc0\x9b\x14\x16\xf0\x43\xe0\xfc\x5e\x3e\x8d\x52\x1a\xd1\x71\x66\xa4\xb7\x68\x6e\x9f\x53\x77\xdc\x50\x4b\x5d\x42\xb1\xb4\x34\x33\xf1\xca\x72\x75\x59\x47\x2b\x6d\xac\xe9\x6c\xd9\xd4\xeb\x15\x77\x4c\x1d\xc2\xff\xb0\xbe\xee\xdb\x04\xbe\xbd\x2c\x3d\xb5\x05\x64\x42\x4f\x70\x00\xf8\xf4\x80\x23\x8b\xe9\x70\x1d\xb6\x47\x6f\xa9\x1d\xee\xa5\xc4\xcf\xf5\xdd\x10\x5c\x8a\x2e\x68\xeb\x7f\x08\xb9\xb8\xc7\xe8\xfa\xe6\xd5\x5b\xd3\xa3\x87\xd9\x46\x0e\x24\x6e\xbd\x3b\x01\xf3\x92\xbc\x50\x87\xc7\xf4\xff\xbf\x97\x38\x32\x0f\x0e\x36\xad\xd4\x8a\x88\x5a\xe2\xd6\xef\x10\xf7\xb5\xbc\xf9\x95\x05\x23\x21\x07\x3b\x96\xec\x4f\x98\xbc\x63\xcd\x82\xb7\xb6\xec\x67\x00\x00\x00\xff\xff\xb8\xb1\x60\x8c\x91\x08\x00\x00")

func msgPartialTmplBytes() ([]byte, error) {
	return bindataRead(
		_msgPartialTmpl,
		"msg.partial.tmpl",
	)
}

func msgPartialTmpl() (*asset, error) {
	bytes, err := msgPartialTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "msg.partial.tmpl", size: 2193, mode: os.FileMode(420), modTime: time.Unix(1470888364, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _msgTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x90\xcf\x6e\xf3\x20\x10\xc4\xcf\xe1\x29\xf6\xe3\xf4\xf5\x60\x7c\xef\xad\x6d\x5a\xd5\x97\xa4\x52\xf2\x02\x1b\xbc\x46\xa8\x86\x45\x0b\x3d\x58\x56\xde\xbd\x10\xf7\x8f\x7a\x1b\x86\xdf\x8c\x46\xdb\xf7\xf0\xc4\x23\x81\xa3\x48\x82\x85\x46\xb8\x2c\x20\x9c\xbb\x6a\x74\x8e\x8d\xaa\x40\xe6\x0f\xb1\x74\x0f\xeb\x0a\xe6\xc5\xcf\x34\xc4\x89\xcd\x10\x9b\x7c\xc4\x4c\x70\xbd\x36\x6a\x7f\x84\xc3\xf1\x0c\xcf\xfb\xe1\xfc\x4f\x25\xb4\xef\xe8\xe8\x6f\xe4\x6d\x33\x0f\x18\x6e\x19\xe5\x43\x62\x29\xf0\x5f\xed\xd6\xb5\x03\x3f\x01\x0b\x98\x53\x22\x6b\x5e\x31\x9f\x66\x6f\xe9\xf7\xf9\x20\x82\x4b\x4b\xed\x34\x45\xcb\xa3\x8f\xae\xbf\xf8\x88\xb2\xe8\x6a\x4d\xa1\xe8\xad\x85\xe2\xb8\x51\x9e\xb5\x52\xd0\x06\x08\x46\xf7\xdd\xf4\x35\x21\x37\x06\x40\xb7\x79\x55\xea\x1b\xf8\x13\xbe\x53\xaa\x7e\x14\x0a\x69\xae\x17\x01\x1d\xb2\x33\x09\xa5\x78\x9c\x4d\xa9\xa6\xde\xca\x1a\xfa\x19\x00\x00\xff\xff\x3a\xb2\xfc\x15\x3f\x01\x00\x00")

func msgTmplBytes() ([]byte, error) {
	return bindataRead(
		_msgTmpl,
		"msg.tmpl",
	)
}

func msgTmpl() (*asset, error) {
	bytes, err := msgTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "msg.tmpl", size: 319, mode: os.FileMode(420), modTime: time.Unix(1470888359, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _srvTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x54\x4d\x6f\xda\x40\x10\x3d\xe3\x5f\x31\xf5\x21\x82\xa8\x98\x53\x2e\x95\x7a\x68\x4b\xab\x72\x80\x54\x81\x7b\xb3\xb1\x07\xcb\x2a\xde\x75\x76\xd7\x50\x64\xf1\xdf\x33\xfb\x61\x88\x61\x03\xe6\xb4\x9e\x37\xef\x31\xdf\x93\x09\xfc\x10\x19\x42\x8e\x1c\x25\xd3\x98\xc1\xcb\x1e\xa4\x50\x63\x32\x8c\x73\x91\x44\xe4\xa0\x44\x2d\x53\xfc\x02\x4d\x03\xc9\xaf\x62\x83\x33\xbe\x16\xc9\x8c\x9b\xe7\x77\xa6\x10\x0e\x07\xe3\x35\x7d\x84\xc5\xe3\x0a\x7e\x4e\x67\xab\x4f\x51\xc5\xd2\x7f\x2c\xc7\x2e\xe5\x8f\x33\x2e\x58\x69\x39\x51\x51\x56\x42\x6a\x18\x46\x83\xa6\x19\x43\xb1\x06\x21\x21\x59\x56\x98\x26\x4f\xf8\x5a\xa3\xd2\xf6\xfd\x9b\xa9\xe5\xa6\x48\x31\x0c\x7d\x93\x92\xed\x8f\x90\xaa\x04\x57\x18\xa6\x75\x31\xc7\xa3\x28\x06\x31\xf2\x54\x64\x05\xcf\x27\x2f\x05\x67\x72\x1f\x93\x69\x5d\xea\xd8\x45\x85\x3c\x73\x5e\x85\x88\xa3\x08\x4c\x42\x92\xf1\xbc\x95\xf5\x29\x29\xe3\x03\x10\x9b\x74\xe9\x19\x5b\xc7\x23\x79\x14\x99\xfa\x2c\x51\x6e\x4d\x3c\x7a\x5f\x21\x94\xa8\x59\xc6\x34\x8b\xec\xd7\xdf\xa5\xdc\x1a\xaa\x95\xf4\xe5\x01\xa5\x65\x9d\x6a\x68\x48\x8b\x1b\x13\xfd\xc8\x44\x71\x92\xa1\xcc\x1e\x54\x5d\xbe\x33\x68\xfc\xaf\x3b\x1e\x12\x5f\x57\x46\x9a\x5a\x99\xcc\x51\x29\x0a\xd2\x7c\x5b\x44\x05\x11\x6a\xc8\xba\xe6\x29\x0c\x35\xdc\x87\x02\x1a\x81\x79\x0c\x47\xfe\x3f\x80\x0a\x81\xba\x96\x1c\x74\x62\xe3\x3b\xdc\xa2\xcf\xa7\x0f\xcb\xba\x0c\x0a\xf8\x7c\x6e\x4a\xac\x28\xcd\xa0\x80\xcd\xff\x26\xdd\xcf\x8e\x49\x97\x54\xce\x0a\xf0\x5e\xae\xad\x5e\x0f\x45\x37\x56\x7d\x24\x55\x3f\xc9\x05\xee\xfc\xa8\x78\xc1\x76\x70\xcc\x24\x40\x2b\xc8\x71\x37\xbc\xe0\x9a\x1e\x6e\x99\xa4\x8d\x02\x08\x8d\xd4\x57\xb8\x0b\x8e\x5a\x13\x0d\x06\xf1\x95\x55\x9d\x9c\x33\xe2\xcf\x36\x96\x2e\xc7\xf5\xf7\x84\x3e\x77\xd0\x27\xb6\x23\xe8\xd9\x41\x73\x95\x9f\x4b\xfa\xde\x5c\xc1\x5d\xa5\x8d\x83\x5d\x29\xbb\x39\xd7\xb6\x06\xda\x7e\x5f\x78\x79\xbb\xf7\x71\xba\x01\x27\x07\x9c\x16\x43\xc1\x7d\x70\xa6\x7c\xc7\xbb\xfd\x3f\xf5\xfe\x4e\xb5\x47\xeb\xd8\xfc\x0f\x94\x54\x1f\x25\x1f\xee\xc1\x1e\x95\x8f\x32\x8b\x08\xd0\x58\x56\x1b\x3a\xe9\x10\x97\x2a\x4f\x2a\x26\x75\xc1\x36\x89\x26\x63\x7c\x79\x4b\xed\x41\x0e\x0a\xfa\x2a\xf4\x55\x3c\x9d\x59\x23\xf9\x16\x00\x00\xff\xff\xda\x7a\xee\x62\x5f\x06\x00\x00")

func srvTmplBytes() ([]byte, error) {
	return bindataRead(
		_srvTmpl,
		"srv.tmpl",
	)
}

func srvTmpl() (*asset, error) {
	bytes, err := srvTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "srv.tmpl", size: 1631, mode: os.FileMode(420), modTime: time.Unix(1470888916, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"msg.partial.tmpl": msgPartialTmpl,
	"msg.tmpl": msgTmpl,
	"srv.tmpl": srvTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"msg.partial.tmpl": &bintree{msgPartialTmpl, map[string]*bintree{}},
	"msg.tmpl": &bintree{msgTmpl, map[string]*bintree{}},
	"srv.tmpl": &bintree{srvTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

