// Code generated by go-bindata.
// sources:
// msg.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _msgTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x96\xdf\x6f\xdb\x36\x10\xc7\x9f\xa5\xbf\xe2\x2a\xa0\x81\x9c\x3a\x52\xb1\xa1\x2f\xe9\x3c\x60\x5b\xd2\x2d\xc0\x92\x0e\x8d\x81\x3d\x04\x41\xcb\x48\x67\x99\xa8\x44\x1a\x24\x55\xd7\x35\xf2\xbf\xef\x8e\xfa\x11\xc9\xb1\xd3\x0c\x35\xd0\x46\xa4\xee\x8e\xdf\x3b\x7e\xee\xa0\x34\x85\x3f\x74\x8e\x50\xa0\x42\x23\x1c\xe6\x70\xb7\x01\xa3\xed\x09\x6d\x9c\x14\x3a\x09\xc9\xc0\xea\xda\x64\x78\x0a\xdb\x2d\x24\x17\xea\x9d\x2c\xf1\x77\x61\x11\xee\xef\xf9\xe5\xd9\x7b\xb8\x7a\x3f\x87\xf3\xb3\x8b\xf9\x8b\x70\x25\xb2\xcf\xa2\x40\x6f\xf9\x4f\xf3\x7c\x25\x2a\x6f\x1a\xca\x6a\xa5\x8d\x83\x38\x0c\x22\xa9\xa3\x30\xd8\x6e\x4f\x40\x2e\x40\x1b\x48\xfe\x12\xf6\xba\x94\x19\xfa\xa7\xdf\x8c\x11\x1b\xf6\x08\x22\x54\x99\xce\xa5\x2a\xd2\x3b\xa9\x84\xd9\x90\x53\xb4\xa8\x5c\xeb\x8b\x2a\xf7\x71\x83\xa8\x90\x6e\x59\xdf\x25\x99\xae\xd2\xd5\xaa\x48\x49\x7d\xa1\xf9\xff\x28\x04\x60\x4b\x23\x14\x69\xea\x04\x59\xf6\x02\x88\x58\x23\x3d\x76\x46\x6d\xb8\x49\x18\xba\xcd\x0a\xe1\xe3\xa5\x2d\xd8\xa2\x95\x0f\xd6\x99\x3a\x73\xb0\x0d\x03\x87\x5f\x1d\x2f\x49\x57\x18\x28\x7e\xdd\x2d\xaa\xfc\x8d\xad\xab\x6e\x49\xd2\x16\xb5\xca\x20\x76\x70\xbc\x13\x6d\x02\x73\x0a\x12\x4f\x5a\x53\x8e\x6a\xd0\xd5\x46\x81\x4b\x38\xfc\xd3\xbe\xfc\xb0\xdf\x97\xd5\x3c\xed\x7b\x79\xf6\xe6\xba\xae\xf6\x7b\x37\xf2\xbf\x73\x36\xae\x2f\xd1\x5a\x2a\x23\xc5\xa0\x12\x27\xed\x8a\x03\x55\x70\x3a\x03\x85\xeb\x78\xe8\xc1\x77\x95\x1e\x33\x22\xe7\xa7\x70\xa5\xe9\x3d\x21\xe6\x34\x48\x25\x9d\x14\xa5\xfc\x86\xb0\x90\x58\xe6\x16\x84\x05\xb7\xc4\x0d\x08\x83\x20\xca\x12\xbe\xa1\xd1\xf0\x45\x94\x35\x4e\x61\xbd\x94\xd9\x12\xa4\x85\x1c\x17\xa2\x2e\x1d\xb9\x43\xa1\xe1\x38\x65\x4c\xda\x04\xbc\xf2\x2f\xc2\x30\x61\x3b\x97\x37\x83\xa3\xdd\xfb\x24\xbd\xc1\x27\xde\xf8\x20\xd6\xb4\xfe\x34\xa5\x75\xf4\x18\xdb\x74\xe0\x13\xf5\x36\x4d\x15\xdb\xad\x07\x66\xf6\xf3\x32\x20\xf0\x5d\x93\x29\x8b\x1e\x69\xd9\x72\x23\x24\x17\x3d\xfa\x37\xcd\x4e\xe1\x20\xf1\x5b\xd7\x5c\xa6\xd7\xf4\x82\xbd\x1e\x76\xfc\xba\xe1\xf6\xb6\x7f\x62\x93\x3f\xf5\x9c\xf4\x74\x9d\x37\xec\x96\xfe\x72\x2b\x38\x1e\x03\x49\x0e\xe3\x2b\x9d\xfb\x94\xfa\xf2\x8e\xeb\x77\x38\xd0\x35\x9a\xe6\x5e\xe3\x35\x48\x9d\xfc\x6b\xa4\x43\x33\x81\x18\x8d\x01\xfa\xa7\xe9\xf9\x50\x51\x9a\x46\x1c\x97\x22\x0c\x68\xc6\xf8\x20\x60\x39\xe7\x52\x3a\x57\x22\xa7\x23\x85\x22\x0f\x0e\x3b\x83\x66\x3e\x34\x87\xc5\xeb\x69\xb7\xfe\xdb\x1b\x9f\x7b\xdb\x29\xd4\x52\xb9\x9f\x7f\x8a\x4b\x54\x71\x95\x0c\x35\x4f\x88\x52\x3a\x95\x43\xbd\x20\x82\x65\xe9\xe9\x68\xf3\xa6\x81\x93\x9c\xb3\xee\x45\x1c\x65\xba\x2e\x73\x50\xda\xc1\xda\x2b\x12\x5e\x24\x05\x2c\xdc\xf2\x14\x5e\xda\x68\xca\x41\x26\xcc\x04\xc0\x82\x26\xdb\x47\xda\x28\xd1\x37\x46\x93\xed\xe8\x60\x3a\x06\xe8\xd7\x1e\x3d\xf3\xc5\xef\xcb\xd7\xde\x82\xaf\x0e\xa7\xe4\xc1\x1b\x5c\x2b\x9d\x75\xc4\xb1\x27\x6f\xc7\xc2\xc1\xff\x5a\xf1\xf4\xc6\x6f\xdc\x37\x92\x3c\x08\x65\x33\xba\x7f\xe4\xdc\x71\xf9\xf6\x08\x18\x1d\x7f\x3f\x9e\xb0\x41\x8f\x6a\xc7\xd6\x61\x98\xce\xd0\xf6\x38\x19\xc6\xe9\x03\x8a\xfc\xb9\x38\x31\x39\x43\x64\x83\x3d\x74\x81\x17\x4c\x86\x1c\x78\x1f\x61\x01\x4f\x14\xbf\xdf\xe0\xd3\x93\xd2\x43\xc7\x9e\xb1\x39\xc0\xdc\x11\xbb\x3e\x51\xa1\x11\x5d\x42\x31\x5a\x86\x95\x34\x64\xf9\x73\x99\xa3\x41\x1a\x3b\x9c\x75\x49\x3d\x9e\x15\x5e\xa9\x8f\xf0\x2b\xec\xce\x8d\x43\x80\x1f\x3e\x96\x66\xb6\x86\x52\x98\x82\xbe\x03\xf0\xeb\x0a\x33\xfa\x54\x98\xed\x86\x9d\xd2\x50\x76\xb3\x97\x39\xe9\xf3\x79\xf7\x02\x3b\xe8\x82\x31\xff\x33\xa8\xc4\x67\x8c\x6f\x6e\x1f\x0d\xad\x29\x4d\x78\x17\xfb\x20\x93\xd1\x00\x0b\x58\x97\xe4\x86\x7a\xfd\x96\xfe\xfe\xf2\x60\x47\xcb\x57\xaf\xf6\xb5\xd4\x00\xa2\x11\xdc\xe6\x19\x70\xdf\xc8\xdb\xff\xd3\x60\xfc\x39\xf2\x44\x93\xfd\x88\x92\x67\xb4\x59\xf0\xbd\x2e\xfb\x2f\x00\x00\xff\xff\xf7\xaa\x5a\x91\xed\x09\x00\x00")

func msgTmplBytes() ([]byte, error) {
	return bindataRead(
		_msgTmpl,
		"msg.tmpl",
	)
}

func msgTmpl() (*asset, error) {
	bytes, err := msgTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "msg.tmpl", size: 2541, mode: os.FileMode(420), modTime: time.Unix(1470817210, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"msg.tmpl": msgTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"msg.tmpl": &bintree{msgTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

