// Code generated by go-bindata.
// sources:
// msg.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _msgTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x96\x6d\x6f\xdb\x36\x10\xc7\x5f\x4b\x9f\xe2\x2a\xa0\x81\x9c\x3a\x52\xb1\xa1\x6f\xd2\x79\xc0\xb6\xa4\x5b\x80\x25\x1d\x9a\x00\x7b\x11\x04\x2d\x23\x9d\x65\xa2\x12\x69\x90\x54\x5d\xd7\xc8\x77\xdf\x1d\xf5\x10\xc9\xb1\xdd\x0c\x35\x90\x84\x0f\xf7\xf0\x27\xf9\xbb\x73\xd2\x14\xfe\xd0\x39\x42\x81\x0a\x8d\x70\x98\xc3\xfd\x1a\x8c\xb6\x27\xb4\x70\x52\xe8\x24\x24\x03\xab\x6b\x93\xe1\x29\x6c\x36\x90\x5c\xa8\x77\xb2\xc4\xdf\x85\x45\x78\x78\xe0\xcd\xb3\xf7\x70\xf5\xfe\x06\xce\xcf\x2e\x6e\x5e\x84\x4b\x91\x7d\x16\x05\x7a\xcb\x7f\x9a\xf1\x95\xa8\xbc\x69\x28\xab\xa5\x36\x0e\xe2\x30\x88\xa4\x8e\xc2\x60\xb3\x39\x01\x39\x07\x6d\x20\xf9\x4b\xd8\xeb\x52\x66\xe8\x47\xbf\x19\x23\xd6\xec\x11\x44\xa8\x32\x9d\x4b\x55\xa4\xf7\x52\x09\xb3\x26\xa7\x68\x5e\xb9\xd6\x17\x55\xee\xe3\x06\x51\x21\xdd\xa2\xbe\x4f\x32\x5d\xa5\xcb\x65\x91\x92\xfa\x42\xf3\xef\x28\x04\x60\x4b\x23\x14\x69\xea\x04\x59\xf6\x02\x88\x58\x23\x0d\x3b\xa3\x36\xdc\x24\x0c\xdd\x7a\x89\xf0\xf1\xd2\x16\x6c\xd1\xca\x07\xeb\x4c\x9d\x39\xd8\x84\x81\xc3\xaf\x8e\xa7\xa4\x2b\x0c\x14\x6f\x77\x93\x2a\x7f\x63\xeb\xaa\x9b\x92\xb4\x79\xad\x32\x88\x1d\x1c\x6f\x45\x9b\xc0\x0d\x05\x89\x27\xad\x29\x47\x35\xe8\x6a\xa3\xc0\x25\x1c\xfe\xb0\x2f\x0f\x76\xfb\xb2\x9a\xc3\xbe\x97\x67\x6f\xae\xeb\x6a\xb7\x77\x23\xff\x3b\xb9\x71\x75\x89\xd6\xd2\x35\x52\x0c\xba\xe2\xa4\x9d\x71\xa0\x0a\x4e\x67\xa0\x70\x15\x0f\x3d\xf8\xad\xd2\x63\x46\xe4\xfc\x14\xae\x34\xed\x13\x62\x4e\x83\x54\xd2\x49\x51\xca\x6f\x08\x73\x89\x65\x6e\x41\x58\x70\x0b\x5c\x83\x30\x08\xa2\x2c\xe1\x1b\x1a\x0d\x5f\x44\x59\xe3\x14\x56\x0b\x99\x2d\x40\x5a\xc8\x71\x2e\xea\xd2\x91\x3b\x14\x1a\x8e\x53\xc6\xa4\x3d\x80\x57\xfe\x45\x18\x26\x6c\xeb\xf1\x66\x70\xb4\xfd\x9e\xa4\x37\xf8\xc4\x0b\x1f\xc4\x8a\xe6\x9f\xa6\x34\x8f\x9e\x62\x9b\x0e\x7c\xa2\xde\xa6\xb9\xc5\x76\xe9\x91\x99\xdd\xbc\x0c\x08\x7c\xd7\x9c\x94\x45\x8f\xb4\x6c\xb8\x10\x92\x8b\x1e\xfd\xdb\x66\xa5\x70\x90\xf8\xa5\x6b\xbe\xa6\xd7\xb4\xc1\x5e\x8f\x2b\x7e\xde\x70\x7b\xd7\x8f\xd8\xe4\x4f\x7d\x43\x7a\xba\xca\x1b\x56\x4b\xff\xb8\x15\x1c\x8f\x1e\xf6\x1a\x4d\xf3\x1c\xf1\x0a\xa4\x4e\xfe\x35\xd2\xa1\x99\x40\x8c\xc6\x00\xfd\x68\x1a\xef\x3b\x4b\x53\x3f\xe3\x13\x84\x01\xb5\x06\x1f\x04\x2c\x4b\x2d\xa5\x73\x25\xb2\x0a\x29\x14\x79\x70\xd8\x19\x34\x65\xdd\x24\x8b\x57\xd3\x6e\xfe\xb7\x37\x3e\xf7\xb6\x53\xa8\xa5\x72\x3f\xff\x14\x97\xa8\xe2\x2a\x19\x6a\x9e\x10\x5c\x94\x95\x43\xbd\x20\xf0\x64\xe9\x1f\xb5\xa5\x81\xfa\x44\x72\xce\xba\xe7\x71\x94\xe9\xba\xcc\x41\x69\x07\x2b\xaf\x48\x78\x91\x14\xb0\x70\x8b\x53\x78\x69\xa3\x29\x07\x99\xf0\x53\x02\xcc\xa9\x21\x7d\xa4\x85\x12\x3d\xcf\xcd\x69\x47\x89\x29\x0d\xd0\xa7\x4d\x3d\xf3\x65\xd0\x5f\x5f\x5b\x0f\xfe\x76\xf8\x48\x9e\x97\xc1\x6b\x50\xae\x23\x8e\x3d\x79\x3b\x16\x0e\xfe\xd3\x8a\xa7\x1d\xbf\xf0\xd0\x48\xf2\xef\x57\x36\x1d\xf7\x47\xf2\x8e\xaf\x6f\x87\x80\x51\xfa\x87\x71\x63\x0c\x7a\xc2\xba\x8a\xdb\x0f\xd3\x19\xda\x1e\x27\xc3\x38\x7d\x40\x91\x3f\x17\x27\x26\x67\x10\xad\xff\xa2\x18\xd2\x05\x5e\x30\x19\x72\xe0\x5d\x84\x05\xdc\x08\xfc\x7a\x83\x4f\x4f\x4a\x0f\x1d\x7b\xc6\x66\x0f\x73\x47\xec\x7a\xe0\x86\x46\x74\x09\xc5\x68\x19\x56\xd2\x90\xe5\xf3\x32\x47\x83\x63\x6c\x71\xd6\x1d\xea\x69\x89\x7b\xa5\x3e\xc2\xaf\xb0\x5d\xee\xfb\x00\xdf\x9f\x96\x5a\xad\x86\x52\x98\x82\xbe\xbe\xf1\xeb\x12\x33\xfa\x86\x9f\x6d\x87\x9d\x52\x2f\x75\xb3\x97\x39\xe9\xf3\xe7\xee\x05\x76\xd0\x05\x63\xfe\x67\x50\x89\xcf\x18\xdf\xde\x3d\xe9\x35\x53\x6a\xcc\x2e\xf6\x41\x26\xa3\xbe\x13\xb0\x2e\xc9\x05\xf5\xfa\x2d\xfd\xfd\xe5\xd1\x8e\xa6\xaf\x5e\xed\x2a\xa9\x01\x44\x23\xb8\xcd\x33\xe0\xbe\x95\x77\xff\xa7\xc0\xf8\xbf\x88\x03\x45\xf6\x23\x4a\x9e\x51\x66\xc1\xf7\xaa\xec\xbf\x00\x00\x00\xff\xff\x1c\xa7\x5e\x1a\xa4\x09\x00\x00")

func msgTmplBytes() ([]byte, error) {
	return bindataRead(
		_msgTmpl,
		"msg.tmpl",
	)
}

func msgTmpl() (*asset, error) {
	bytes, err := msgTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "msg.tmpl", size: 2468, mode: os.FileMode(420), modTime: time.Unix(1470882152, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"msg.tmpl": msgTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"msg.tmpl": &bintree{msgTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

