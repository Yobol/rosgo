// Code generated by go-bindata.
// sources:
// msg.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _msgTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x57\x6d\x6f\xdb\x36\x10\xfe\x6c\xfd\x8a\xab\x80\x16\xb2\xeb\xc8\xc5\x86\x7e\x49\x97\x01\xdb\x92\x6e\x06\x1a\x77\x68\x8c\xed\x43\x10\xb4\xb4\x74\x52\x88\x4a\xa4\x47\x51\x4d\x1d\x23\xff\x7d\x77\x94\xac\x48\xb2\xf3\xe2\x2c\x58\x81\xb6\x24\x75\xf7\xdc\x0b\x9f\x7b\x24\x4f\x26\xf0\x9b\x8e\x11\x52\x54\x68\x84\xc5\x18\x16\x2b\x30\xba\x38\xa0\x83\x83\x54\x87\x1e\x19\x14\xba\x34\x11\x1e\xc2\x7a\x0d\xe1\x54\xbd\x97\x19\xc2\xcd\x0d\x3f\x38\xfe\x08\xb3\x8f\x73\x38\x39\x9e\xce\x5f\x78\x4b\x11\x7d\x15\x29\x3a\xab\x3f\xab\xf5\x4c\xe4\xce\xd4\x93\xf9\x52\x1b\x0b\x81\x37\xf0\x17\x2b\x8b\x85\xef\x0d\xd6\xeb\x03\x90\x09\x68\x03\xe1\x1f\xa2\xf8\xb5\x94\x99\x9d\x2a\xb7\x3e\xcb\x64\x84\x6e\xf5\x8b\x31\x62\xc5\x00\x03\x1f\x55\xa4\x63\xa9\xd2\xc9\x42\x2a\x61\x56\x35\x00\xaa\xd8\x3d\xae\xc1\x7a\x3e\x49\x6e\xbb\x76\x74\x96\x4a\x7b\x59\x2e\xc2\x48\xe7\x93\xe5\x32\x9d\x50\xa5\xa9\xe6\x7f\x7d\x6f\xe8\x79\x76\xb5\x44\xf8\x7c\x5a\xa4\x5c\x43\x9d\x3c\x14\xd6\x94\x91\x85\xb5\x37\xb0\xf8\xdd\xf2\x96\xd2\xf0\x06\x8a\x1f\x6f\x36\x79\xfc\xb6\x28\xf3\xcd\x96\x02\x25\xa5\x8a\x20\xb0\x30\xea\xa1\x0d\x61\x4e\x20\xc1\xb0\x36\x65\x54\x83\xb6\x34\x0a\x6c\xc8\xf0\xf7\xfb\xf2\x62\xb7\x2f\x67\x73\xbf\xef\xe9\xf1\xdb\xb3\x32\xdf\xed\x5d\xa5\xff\x40\x6c\xbc\x3a\xc5\xa2\xa0\x5b\x25\x0c\x6a\x58\x58\xef\x18\x28\x87\xc3\x23\x50\x78\x15\xb4\x3d\xb8\xf3\x93\x11\x13\xe4\xe4\x10\x66\x9a\x9e\x13\xb9\xac\x06\xa9\xa4\x95\x22\x93\xd7\x08\x89\xc4\x2c\x2e\x40\x14\x60\x2f\x71\x05\xc2\x20\x88\x2c\x83\x6b\x34\x1a\xbe\x89\xac\xc4\x31\x5c\x5d\xca\xe8\x12\x64\x01\x31\x26\xa2\xcc\x2c\xb9\x43\xaa\x61\x34\xe1\x1b\xae\x0b\x70\x99\x7f\x13\x86\xf9\xd5\xbb\xbc\x23\x78\xd5\xbf\x4f\xca\x77\xf0\x85\x0f\x3e\x89\x2b\xda\x7f\x19\xd3\xde\xdf\x26\xed\xa4\xe5\xe3\x37\x36\x55\x17\xeb\xa3\x9b\x86\x33\xbb\xf9\xc2\xcc\x33\x42\x51\x8f\xc2\xf7\x55\xa5\x15\x57\x5b\xb9\xac\x1d\x6d\xa7\x0d\x6b\xcf\xab\x93\xd4\x42\xe8\x8e\xce\xb8\x4d\x6f\xe8\x01\x7b\xdd\x9e\xb8\x7d\x45\xea\x8b\x66\xc5\x26\xbf\xeb\x39\xe5\xb3\x99\xbb\x36\xf7\x9b\xcb\xcd\x61\xd4\x25\x24\x39\x74\xaf\x74\xee\x4a\x6a\xda\xdb\xed\x1f\x03\x31\x2c\xdd\x87\x54\x08\x7e\x81\xa6\xba\x4d\xbf\x33\x89\x9b\x81\x6e\x9d\xe1\x3f\x10\x36\xd9\xf9\x15\x0d\x2b\xa7\x6a\xa6\xc3\xbf\x8d\xb4\x18\x2c\xca\x64\x0c\xf5\xc9\x07\x69\x6d\x86\x27\x2a\x96\x42\x8d\xa1\x94\xca\xfe\xf8\x43\x90\xa1\x0a\xce\x2f\x58\x47\x1c\xdf\x3e\x68\xbd\xfc\x8b\x2e\x9f\x6a\xa1\x3f\x04\x56\x26\x35\xd2\x1d\x46\x5e\xdd\x97\xac\xc0\xed\xb4\xac\xcc\xa9\x12\x3f\x2e\x49\x0c\xa5\x56\x7b\xe5\xd7\x0d\x14\x9e\x61\x34\x7c\xaa\xef\xcc\x39\xb7\x12\x7d\x72\x1a\x0d\x4a\x4b\x2a\x1b\x44\x2e\xdf\x18\x9a\x92\xad\xd4\xeb\x4b\xe5\x30\xc3\x77\xce\xe8\x05\x8d\xb8\xcc\xdc\xf8\xd4\xc4\xa0\x53\x1e\x82\x36\x7c\x5b\x6c\x77\xd3\xad\x03\x0d\x23\xf7\x3a\x20\xb6\x24\x09\x9a\x21\x04\x1c\x88\xfe\x6a\x5a\xdf\x39\x40\xf4\xe2\x69\xf3\xb1\xa1\xdc\xb4\xa5\xfd\xfb\x33\x2a\x0f\xdb\x69\x32\x91\x12\x7a\x37\x7d\x1e\x03\xb2\xb8\x55\x59\x74\x6c\x5c\x27\x38\xb6\xc5\x7c\x99\xd1\xab\xb3\x33\x0b\x05\xda\x8c\xfa\xc9\xaa\x14\x82\x5f\x0f\x47\xbf\xfd\x8f\xf3\x0e\x96\x34\x29\x36\x01\x3f\x0f\x5f\x16\x7e\x15\x7f\xd8\x1f\xef\x41\x23\x03\x9b\xb9\xed\x0f\x6a\x8c\xcf\x31\xaa\x54\x34\x67\x55\xb0\x0a\x55\xdd\x6b\xb1\xa8\xee\xf1\x27\x14\xf1\x3d\x4d\x7f\xc5\xce\x0f\x92\x2a\x16\x56\x70\xe7\x73\xf1\x75\x33\xc9\x63\x12\x7f\x1b\x38\xef\xe1\xde\x51\x19\xef\x11\x4c\x6e\x8f\x01\x61\x57\xa5\x07\xce\x99\x2d\xf6\x96\x8e\x7d\x7b\xb3\x43\x43\x1e\x4a\xfa\x3f\x86\x98\x3d\x22\xc6\x5d\xb2\xf1\xa4\x88\x8f\x0c\xb6\x8f\x5e\x1d\xdf\x72\xfb\xf9\x15\xab\x07\xbe\xd1\x2c\x2e\xfa\x59\x35\xeb\x7f\x1b\xad\x3a\xf8\xf6\x47\x86\x8b\xe7\xe2\xff\x0c\xfd\x0f\x8e\x36\x10\x7d\x58\x87\x27\x5c\x71\x12\xf8\xc2\xe5\xef\x9c\x58\x30\xdb\x02\x69\xb5\x86\x4c\x98\x94\x7e\x3a\xe0\xf7\x25\x46\xf4\xeb\xe2\xa8\x0f\x3b\xa6\xaf\x39\x7b\xf4\x32\xf6\xc7\x0e\x63\xb8\x2d\x92\x5d\xd1\x6d\x04\x61\xeb\x6b\xa7\xab\x0e\x6d\x0a\x71\x5e\x92\xb5\xe4\xcd\x3b\xfa\xff\xa7\x5b\x3b\xda\xbe\x7e\xbd\x43\xc7\x3b\x52\x79\xb7\x16\x9f\xcb\x8b\x8e\x1c\xdf\xec\x18\x95\x27\x01\xef\x25\xf2\xff\x06\x00\x00\xff\xff\x61\x5e\xed\x33\xc2\x0d\x00\x00")

func msgTmplBytes() ([]byte, error) {
	return bindataRead(
		_msgTmpl,
		"msg.tmpl",
	)
}

func msgTmpl() (*asset, error) {
	bytes, err := msgTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "msg.tmpl", size: 3522, mode: os.FileMode(420), modTime: time.Unix(1470590024, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"msg.tmpl": msgTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"msg.tmpl": &bintree{msgTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

