// Code generated by go-bindata.
// sources:
// msg.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _msgTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x55\x61\x4f\xdb\x3a\x14\xfd\xdc\xfc\x8a\x4b\xf5\x84\x92\xaa\x8d\xa5\xf7\xc4\x17\x9e\xfa\xe5\xbd\xc2\x84\x34\xca\x44\xab\x4d\xda\x34\x81\xdb\xdc\x76\x1e\x89\xc3\x6c\x67\xac\x8b\xf8\xef\xbb\x76\xdc\x2e\x69\x4b\x4b\x41\x43\x02\xd9\xce\x3d\xe7\x9e\x7b\x7d\xae\x29\x4b\xd6\x09\xfe\x82\x29\x37\xc0\xf2\x7b\xc3\x54\xae\xd9\x57\x9e\x20\x63\xfa\x0b\x57\xc8\xb4\x49\x6e\x32\x3d\xd7\x8c\xfe\xb0\x91\x51\x42\xce\x63\x5a\x06\xda\x2d\x21\xe1\x86\x07\x1d\xf6\xf8\x18\x04\x8c\xc1\xff\x79\x82\x30\x47\x89\x8a\x1b\x4c\x60\xb2\x00\xa2\xeb\xd1\x41\x6f\x9e\xc7\x36\x40\xe7\x85\x9a\xe2\x29\x94\x25\xc4\x17\xf2\x5c\xa4\x08\x04\xa5\x0f\x83\x2b\x18\x5e\x8d\xe1\x6c\x70\x31\x3e\x0a\xee\xf9\xf4\x8e\xcf\xd1\x45\xbd\xab\xd6\x43\x9e\xb9\xd0\xc0\x2c\xee\x11\x6e\x2e\xf5\xdc\x7e\xf4\xa7\x40\x62\x8a\xa9\x81\x32\x68\x19\xfc\x61\xa0\xd2\x16\xb4\xa4\xfd\xbc\xdc\x64\xc9\x89\x2e\xb2\xe5\x96\x98\x66\x85\x9c\x42\x68\xa0\xb3\xc6\x16\xc1\x98\x48\xc2\xc8\x87\x5a\x56\x85\xa6\x50\x12\x4c\x6c\xe9\x77\x63\xed\x62\x3b\xd6\xaa\xd9\x8d\xbd\x1c\x9c\x8c\x8a\x6c\x3b\xba\x92\xbf\x27\x37\x3e\x5c\xa2\xd6\xd4\x2e\xe2\xa0\xce\xc7\x7e\x67\x89\x32\x38\xed\x83\xc4\x87\xb0\x8e\x08\x5a\x65\xd9\x03\xc5\x25\xc5\xc4\xe7\x02\xd3\x44\xdb\x26\xb7\xb2\xb8\xde\xdd\xbe\xbb\x88\x37\xf9\x47\x54\xf9\x7b\x9e\x16\xee\x22\x1c\x12\x65\xe2\xd6\x5e\xa5\x93\xf7\x9d\x2b\x08\x83\xd6\xda\x0d\xf5\xe1\x78\xfd\xd2\x48\x54\xeb\xd6\x1e\x5c\xf3\x07\xda\xdf\x76\x69\xdf\xde\xbc\x72\x56\xc3\xb4\x57\x31\x55\xab\xfc\xd1\x63\x10\x79\x63\x6c\x37\xc5\xf6\x22\x1b\x5a\x5c\x81\x63\xa2\x58\x1a\xad\x5e\xdf\xaa\xe9\x19\x74\x9a\x46\x21\x40\xb3\xd5\x63\xa7\x62\xd5\x91\x66\xc9\x4f\x13\x8d\x50\x09\x9e\x8a\x9f\x18\x4e\x8a\x19\x74\x26\x0b\x83\x3a\xfe\xaf\x98\xcd\x50\x45\x10\xa2\x52\x40\xbf\x39\xad\x77\x54\xd3\x03\x31\x03\x02\x89\xd4\x5c\xc8\xfa\x19\x7e\x83\x78\x55\x5a\xbb\xf2\x56\xdb\x05\x4c\x84\xe4\x6a\x11\x7f\x50\xc2\xb8\xcc\x5d\xf0\x27\x6f\x85\x31\x29\x9e\xc9\x44\x70\xd9\x85\x42\x48\xf3\xcf\xdf\x61\x8a\x32\xfc\xf4\xd9\x6a\x0b\x1b\x06\x89\xe8\x87\xb8\x8a\x99\x27\xda\x1e\x13\xf8\x96\xa6\x1a\x37\x45\x19\x91\x61\x1b\xda\x49\x41\x0f\x87\xc8\xe5\x41\xea\x1a\x79\xe2\x11\x4e\xa3\x17\x42\x87\x0e\x5b\x93\xf9\x52\x11\x2b\x12\x3f\x1e\x0d\x42\x5b\x3b\xdd\x67\x7f\x43\x77\xcd\x01\xd1\xbf\x2e\xe6\x88\x26\x56\xa4\x6e\x50\xbc\x9f\xe8\xd4\xda\x7d\x93\xbd\x31\x88\xd6\x67\xbf\x8d\x56\x3d\xda\x11\x0c\x50\x6f\x73\xd9\x35\xd2\x6b\xff\x47\x5d\x66\x5f\x04\x4d\x59\xbd\x8f\x6a\x2d\xf0\xad\xb4\x12\x76\xf4\xf6\xd8\x82\xf7\xb6\xc4\xfe\x27\xb2\x6f\x5c\xc6\xef\x96\x16\xec\x02\x25\x0c\x1d\x3a\x3a\x38\xab\xe5\xdb\x9b\x74\xfd\xa1\xac\xca\x0e\x1d\xf6\x70\xc3\x1f\xda\x97\x4d\xe7\xef\xd3\xfb\xba\x0c\xc3\x67\xa4\x78\xca\xed\x2f\x49\xf8\xcc\x5c\x07\x4c\xd9\xda\x0c\xbc\x7e\xce\x7e\x05\x00\x00\xff\xff\x97\x89\x3f\x69\x3f\x09\x00\x00")

func msgTmplBytes() ([]byte, error) {
	return bindataRead(
		_msgTmpl,
		"msg.tmpl",
	)
}

func msgTmpl() (*asset, error) {
	bytes, err := msgTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "msg.tmpl", size: 2367, mode: os.FileMode(420), modTime: time.Unix(1470545377, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"msg.tmpl": msgTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"msg.tmpl": &bintree{msgTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

